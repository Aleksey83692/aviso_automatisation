#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aviso YouTube Tasks Automation Script - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –£–±—Ä–∞–Ω—ã –í–°–ï –º–æ—Å—Ç—ã Tor - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
- –£–ø—Ä–æ—â–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor
- –î–æ–±–∞–≤–ª–µ–Ω fallback –±–µ–∑ Tor –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
"""

import os
import sys
import time
import random
import json
import logging
import subprocess
import platform
import re
import pickle
import hashlib
import shutil
import zipfile
import stat
import socket
import urllib3
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import math

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
def install_requirements():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'selenium',
        'requests',
        'beautifulsoup4',
        'fake-useragent',
        'webdriver-manager'
    ]
    
    logging.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    for package in required_packages:
        try:
            package_name = package.split('[')[0].replace('-', '_')
            __import__(package_name)
            logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logging.info(f"‚ö† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞–∫–µ—Ç {package}...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package], 
                                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                logging.error(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ {package}: {e}")
                try:
                    logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}...")
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", package],
                                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ --user")
                except subprocess.CalledProcessError:
                    logging.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_requirements()

# –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.action_chains import ActionChains
    from selenium.webdriver.firefox.options import Options
    from selenium.webdriver.firefox.service import Service
    from selenium.common.exceptions import *
    from selenium.webdriver.common.keys import Keys
    try:
        from webdriver_manager.firefox import GeckoDriverManager as WDMGeckoDriverManager
    except ImportError:
        WDMGeckoDriverManager = None
    import requests
    from bs4 import BeautifulSoup
    from fake_useragent import UserAgent
except ImportError as e:
    logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    logging.error("üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
    logging.error("pip install selenium requests beautifulsoup4 fake-useragent webdriver-manager")
    sys.exit(1)

def kill_existing_tor_processes():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Tor"""
    try:
        logging.info("üîÑ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor...")
        
        system = platform.system().lower()
        is_termux = 'com.termux' in os.environ.get('PREFIX', '') or '/data/data/com.termux' in os.environ.get('HOME', '')
        
        if is_termux or system == 'linux':
            # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã tor
            try:
                subprocess.run(['pkill', '-f', 'tor'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ killall
            try:
                subprocess.run(['killall', 'tor'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
                
        elif system == 'windows':
            try:
                subprocess.run(['taskkill', '/F', '/IM', 'tor.exe'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
        
        logging.info("‚úì –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor: {e}")

def find_free_port_range(start_port: int, count: int = 2) -> List[int]:
    """–ü–æ–∏—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –ø–æ–¥—Ä—è–¥"""
    free_ports = []
    
    for port in range(start_port, start_port + 1000):
        if len(free_ports) >= count:
            break
            
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.bind(('127.0.0.1', port))
                free_ports.append(port)
        except OSError:
            free_ports = []  # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ
            continue
    
    if len(free_ports) >= count:
        return free_ports[:count]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ä—è–¥, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    import random
    fallback_ports = []
    for _ in range(count):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('127.0.0.1', 0))
            fallback_ports.append(s.getsockname()[1])
    
    return fallback_ports

class GeckoDriverManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è geckodriver"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.is_termux = self.detect_termux()
        self.driver_path = None
        
    def detect_termux(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ Termux"""
        return 'com.termux' in os.environ.get('PREFIX', '') or \
               '/data/data/com.termux' in os.environ.get('HOME', '')
    
    def get_latest_geckodriver_version(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ geckodriver"""
        try:
            response = requests.get('https://api.github.com/repos/mozilla/geckodriver/releases/latest', timeout=10)
            response.raise_for_status()
            data = response.json()
            return data['tag_name'].lstrip('v')
        except Exception as e:
            logging.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é geckodriver: {e}")
            return "0.33.0"  # –§–æ–ª–ª–±—ç–∫ –≤–µ—Ä—Å–∏—è
    
    def download_geckodriver(self, version: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ geckodriver"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            if self.is_termux:
                platform_name = "linux-aarch64"
                if "aarch64" not in platform.machine():
                    platform_name = "linux32"
            elif self.system == 'linux':
                arch = platform.machine()
                if arch == 'x86_64':
                    platform_name = "linux64"
                elif arch == 'aarch64':
                    platform_name = "linux-aarch64"
                else:
                    platform_name = "linux32"
            elif self.system == 'windows':
                arch = platform.machine()
                if arch == 'AMD64':
                    platform_name = "win64"
                else:
                    platform_name = "win32"
            elif self.system == 'darwin':
                arch = platform.machine()
                if arch == 'arm64':
                    platform_name = "macos-aarch64"
                else:
                    platform_name = "macos"
            else:
                logging.error(f"‚úó –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.system}")
                return None
            
            # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if self.system == 'windows':
                filename = f"geckodriver-v{version}-{platform_name}.zip"
                executable_name = "geckodriver.exe"
            else:
                filename = f"geckodriver-v{version}-{platform_name}.tar.gz"
                executable_name = "geckodriver"
            
            url = f"https://github.com/mozilla/geckodriver/releases/download/v{version}/{filename}"
            
            logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ geckodriver v{version} –¥–ª—è {platform_name}...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤
            drivers_dir = os.path.join(os.path.expanduser("~"), ".webdrivers")
            os.makedirs(drivers_dir, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            
            archive_path = os.path.join(drivers_dir, filename)
            with open(archive_path, 'wb') as f:
                f.write(response.content)
            
            logging.info(f"‚úì Geckodriver —Å–∫–∞—á–∞–Ω: {archive_path}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            extract_dir = os.path.join(drivers_dir, f"geckodriver-{version}")
            os.makedirs(extract_dir, exist_ok=True)
            
            if filename.endswith('.zip'):
                with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
            else:
                import tarfile
                with tarfile.open(archive_path, 'r:gz') as tar_ref:
                    tar_ref.extractall(extract_dir)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            driver_path = os.path.join(extract_dir, executable_name)
            
            if not os.path.exists(driver_path):
                # –ò—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                for root, dirs, files in os.walk(extract_dir):
                    if executable_name in files:
                        driver_path = os.path.join(root, executable_name)
                        break
            
            if os.path.exists(driver_path):
                # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
                if self.system != 'windows':
                    st = os.stat(driver_path)
                    os.chmod(driver_path, st.st_mode | stat.S_IEXEC)
                
                logging.info(f"‚úÖ Geckodriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {driver_path}")
                
                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                try:
                    os.remove(archive_path)
                except:
                    pass
                
                return driver_path
            else:
                logging.error(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª geckodriver –≤ {extract_dir}")
                return None
                
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è geckodriver: {e}")
            return None
    
    def find_geckodriver(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ geckodriver –≤ —Å–∏—Å—Ç–µ–º–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
        try:
            if self.system == 'windows':
                result = subprocess.run(['where', 'geckodriver'], capture_output=True, text=True)
            else:
                result = subprocess.run(['which', 'geckodriver'], capture_output=True, text=True)
            
            if result.returncode == 0:
                driver_path = result.stdout.strip()
                if os.path.exists(driver_path):
                    logging.info(f"‚úì –ù–∞–π–¥–µ–Ω geckodriver –≤ PATH: {driver_path}")
                    return driver_path
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        possible_paths = []
        
        if self.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/geckodriver',
                f"{os.environ.get('PREFIX', '')}/bin/geckodriver"
            ]
        elif self.system == 'linux':
            possible_paths = [
                '/usr/bin/geckodriver',
                '/usr/local/bin/geckodriver',
                '/opt/geckodriver/geckodriver',
                '/snap/bin/geckodriver'
            ]
        elif self.system == 'windows':
            possible_paths = [
                r"C:\Program Files\geckodriver\geckodriver.exe",
                r"C:\Program Files (x86)\geckodriver\geckodriver.exe",
                r"C:\geckodriver\geckodriver.exe"
            ]
        elif self.system == 'darwin':
            possible_paths = [
                '/usr/local/bin/geckodriver',
                '/opt/homebrew/bin/geckodriver'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        home_drivers = os.path.join(os.path.expanduser("~"), ".webdrivers")
        if os.path.exists(home_drivers):
            for root, dirs, files in os.walk(home_drivers):
                for file in files:
                    if file.startswith('geckodriver'):
                        possible_paths.append(os.path.join(root, file))
        
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω geckodriver: {path}")
                return path
        
        return None
    
    def get_driver_path(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ geckodriver —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
        if self.driver_path:
            return self.driver_path
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        driver_path = self.find_geckodriver()
        
        if not driver_path:
            logging.info("üì¶ Geckodriver –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webdriver-manager
            if WDMGeckoDriverManager:
                try:
                    logging.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è webdriver-manager...")
                    driver_path = WDMGeckoDriverManager().install()
                    if driver_path and os.path.exists(driver_path):
                        logging.info(f"‚úÖ Geckodriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webdriver-manager: {driver_path}")
                        self.driver_path = driver_path
                        return driver_path
                except Exception as e:
                    logging.warning(f"‚ö† Webdriver-manager –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
            version = self.get_latest_geckodriver_version()
            driver_path = self.download_geckodriver(version)
            
            if not driver_path:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å geckodriver –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        self.driver_path = driver_path
        return driver_path

class UserAgentManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    
    def __init__(self):
        self.ua_file = "user_agents.json"
        self.user_agents = self.load_user_agents()
        
    def load_user_agents(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö User-Agent'–æ–≤"""
        try:
            if os.path.exists(self.ua_file):
                with open(self.ua_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ User-Agent'–æ–≤: {e}")
        
        return {}
    
    def save_user_agents(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ User-Agent'–æ–≤"""
        try:
            with open(self.ua_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_agents, f, indent=2, ensure_ascii=False)
            logging.debug("üíæ User-Agent'—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è User-Agent'–æ–≤: {e}")
    
    def get_user_agent(self, username: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User-Agent –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_key = hashlib.md5(username.encode()).hexdigest()
        
        if user_key not in self.user_agents:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π User-Agent –¥–ª—è Firefox
            try:
                ua = UserAgent()
                # –ü–æ–ª—É—á–∞–µ–º Firefox User-Agent
                firefox_ua = ua.firefox
                self.user_agents[user_key] = firefox_ua
                self.save_user_agents()
                logging.info(f"üé≠ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π User-Agent –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
            except Exception as e:
                logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ User-Agent: {e}")
                # –§–æ–ª–ª–±—ç–∫ User-Agent –¥–ª—è Firefox
                self.user_agents[user_key] = "Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/119.0"
        
        user_agent = self.user_agents[user_key]
        logging.info(f"üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è User-Agent –¥–ª—è {username}: {user_agent[:50]}...")
        return user_agent

class HumanBehaviorSimulator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    @staticmethod
    def random_sleep(min_seconds: float = 0.5, max_seconds: float = 3.0):
        """–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞"""
        sleep_time = random.uniform(min_seconds, max_seconds)
        logging.debug(f"üí§ –ü–∞—É–∑–∞ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥")
        time.sleep(sleep_time)
    
    @staticmethod
    def generate_bezier_curve(start: Tuple[int, int], end: Tuple[int, int], 
                            control_points: int = 3) -> List[Tuple[int, int]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        def bezier_point(t: float, points: List[Tuple[int, int]]) -> Tuple[int, int]:
            n = len(points) - 1
            x = sum(math.comb(n, i) * (1-t)**(n-i) * t**i * points[i][0] for i in range(n+1))
            y = sum(math.comb(n, i) * (1-t)**(n-i) * t**i * points[i][1] for i in range(n+1))
            return int(x), int(y)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
        control_pts = [start]
        for _ in range(control_points):
            x = random.randint(min(start[0], end[0]), max(start[0], end[0]))
            y = random.randint(min(start[1], end[1]), max(start[1], end[1]))
            control_pts.append((x, y))
        control_pts.append(end)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –∫—Ä–∏–≤–æ–π
        curve_points = []
        steps = random.randint(20, 50)
        for i in range(steps + 1):
            t = i / steps
            point = bezier_point(t, control_pts)
            curve_points.append(point)
        
        return curve_points
    
    @staticmethod
    def human_like_typing(element, text: str, driver):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏"""
        element.clear()
        HumanBehaviorSimulator.random_sleep(0.3, 1.0)
        
        # –†–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–µ—á–∞—Ç–æ–∫
        qwerty_neighbors = {
            'q': ['w', 'a'], 'w': ['q', 'e', 's'], 'e': ['w', 'r', 'd'], 'r': ['e', 't', 'f'],
            't': ['r', 'y', 'g'], 'y': ['t', 'u', 'h'], 'u': ['y', 'i', 'j'], 'i': ['u', 'o', 'k'],
            'o': ['i', 'p', 'l'], 'p': ['o', 'l'], 'a': ['q', 's', 'z'], 's': ['w', 'a', 'd', 'x'],
            'd': ['e', 's', 'f', 'c'], 'f': ['r', 'd', 'g', 'v'], 'g': ['t', 'f', 'h', 'b'],
            'h': ['y', 'g', 'j', 'n'], 'j': ['u', 'h', 'k', 'm'], 'k': ['i', 'j', 'l'],
            'l': ['o', 'k', 'p'], 'z': ['a', 's', 'x'], 'x': ['z', 's', 'd', 'c'],
            'c': ['x', 'd', 'f', 'v'], 'v': ['c', 'f', 'g', 'b'], 'b': ['v', 'g', 'h', 'n'],
            'n': ['b', 'h', 'j', 'm'], 'm': ['n', 'j', 'k'],
            '1': ['2', 'q'], '2': ['1', '3', 'q', 'w'], '3': ['2', '4', 'w', 'e'],
            '4': ['3', '5', 'e', 'r'], '5': ['4', '6', 'r', 't'], '6': ['5', '7', 't', 'y'],
            '7': ['6', '8', 'y', 'u'], '8': ['7', '9', 'u', 'i'], '9': ['8', '0', 'i', 'o'],
            '0': ['9', 'o', 'p']
        }
        
        typed_text = ""
        i = 0
        
        while i < len(text):
            char = text[i].lower()
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)
            if char == ' ':
                pause = random.uniform(0.1, 0.4)  # –î–ª–∏–Ω–Ω–µ–µ –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤
            elif char.isdigit():
                pause = random.uniform(0.08, 0.25)  # –¶–∏—Ñ—Ä—ã –ø–µ—á–∞—Ç–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            else:
                pause = random.uniform(0.05, 0.2)
            
            time.sleep(pause)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ (8% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            if random.random() < 0.08 and char in qwerty_neighbors:
                # –î–µ–ª–∞–µ–º –æ–ø–µ—á–∞—Ç–∫—É
                wrong_char = random.choice(qwerty_neighbors[char])
                element.send_keys(wrong_char)
                typed_text += wrong_char
                logging.debug(f"üî§ –û–ø–µ—á–∞—Ç–∫–∞: '{wrong_char}' –≤–º–µ—Å—Ç–æ '{char}'")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (–∫–∞–∫ –±—É–¥—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É)
                time.sleep(random.uniform(0.2, 0.8))
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                time.sleep(random.uniform(0.1, 0.3))
                
                # –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                element.send_keys(text[i])
                typed_text += text[i]
                logging.debug(f"üî§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: '{text[i]}'")
                
            # –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è (3% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            elif random.random() < 0.03:
                element.send_keys(text[i])
                element.send_keys(text[i])  # –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                typed_text += text[i] + text[i]
                logging.debug(f"üî§ –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: '{text[i]}'")
                
                # –ü–∞—É–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                time.sleep(random.uniform(0.3, 0.7))
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                
            # –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ caps lock (—Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–∫–≤, 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            elif random.random() < 0.02 and char.isalpha():
                if random.choice([True, False]):
                    wrong_case = text[i].upper() if text[i].islower() else text[i].lower()
                else:
                    wrong_case = text[i].upper()
                
                element.send_keys(wrong_case)
                typed_text += wrong_case
                logging.debug(f"üî§ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä: '{wrong_case}' –≤–º–µ—Å—Ç–æ '{text[i]}'")
                
                # –ü–∞—É–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                time.sleep(random.uniform(0.4, 1.0))
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                time.sleep(random.uniform(0.1, 0.3))
                element.send_keys(text[i])
                typed_text += text[i]
                
            else:
                # –û–±—ã—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                element.send_keys(text[i])
                typed_text += text[i]
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–∫–∞–∫ –±—É–¥—Ç–æ –¥—É–º–∞–µ–º)
            if random.random() < 0.05:  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                thinking_pause = random.uniform(0.5, 2.0)
                logging.debug(f"ü§î –ü–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {thinking_pause:.2f}—Å")
                time.sleep(thinking_pause)
            
            i += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
        HumanBehaviorSimulator.random_sleep(0.5, 1.5)

class SimpleTorManager:
    """–£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¢–û–õ–¨–ö–û —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.tor_port = None
        self.control_port = None
        self.tor_process = None
        self.system = platform.system().lower()
        self.is_termux = self.detect_termux()
        
        # –ü—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        self.tor_data_dir = None
        self.torrc_path = None
        self.stdout_log = None
        self.stderr_log = None
        
    def detect_termux(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ Termux"""
        return 'com.termux' in os.environ.get('PREFIX', '') or \
               '/data/data/com.termux' in os.environ.get('HOME', '')
    
    def command_exists(self, cmd: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if self.is_termux or self.system == 'linux':
                result = subprocess.run(['command', '-v', cmd], 
                                      capture_output=True, text=True, shell=True)
                return result.returncode == 0
            elif self.system == 'windows':
                result = subprocess.run(['where', cmd], 
                                      capture_output=True, text=True)
                return result.returncode == 0
            else:  # macOS
                result = subprocess.run(['which', cmd], 
                                      capture_output=True, text=True)
                return result.returncode == 0
        except:
            return False
    
    def install_tor_termux(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –≤ Termux"""
        try:
            logging.info("üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –≤ Termux...")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
            logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
            subprocess.run(['pkg', 'update'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor
            logging.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor...")
            subprocess.run(['pkg', 'install', '-y', 'tor'], check=True,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            logging.info("‚úì Tor —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Termux")
            return True
            
        except subprocess.CalledProcessError as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –≤ Termux: {e}")
            return False
        except Exception as e:
            logging.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –≤ Termux: {e}")
            return False
    
    def install_tor(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor"""
        if self.is_termux:
            return self.install_tor_termux()
        else:
            logging.warning("‚ö† –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Termux")
            logging.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tor –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
            return False
    
    def find_tor_executable(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Tor"""
        possible_paths = []
        
        if self.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/tor',
                f"{os.environ.get('PREFIX', '')}/bin/tor"
            ]
        elif self.system == 'linux':
            possible_paths = [
                '/usr/bin/tor',
                '/usr/local/bin/tor',
                '/opt/tor/bin/tor'
            ]
        elif self.system == 'windows':
            username = os.getenv('USERNAME', 'User')
            possible_paths = [
                f"C:\\Users\\{username}\\Desktop\\Tor Browser\\Browser\\TorBrowser\\Tor\\tor.exe",
                r"C:\Program Files\Tor Browser\Browser\TorBrowser\Tor\tor.exe",
                r"C:\Program Files (x86)\Tor Browser\Browser\TorBrowser\Tor\tor.exe",
                r"C:\Tor\tor.exe"
            ]
        elif self.system == 'darwin':
            possible_paths = [
                '/usr/local/bin/tor',
                '/opt/homebrew/bin/tor',
                '/Applications/Tor Browser.app/Contents/MacOS/Tor/tor'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É—Ç—å
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω Tor: {path}")
                return path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ PATH
        if self.command_exists('tor'):
            logging.info("‚úì Tor –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return 'tor'
        
        return None
    
    def check_tor_port(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ Tor"""
        if not self.tor_port:
            return False
            
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(3)
                result = s.connect_ex(('127.0.0.1', self.tor_port))
                is_open = result == 0
                logging.debug(f"üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ Tor {self.tor_port}: {'–æ—Ç–∫—Ä—ã—Ç' if is_open else '–∑–∞–∫—Ä—ã—Ç'}")
                return is_open
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ Tor: {e}")
            return False

    def test_tor_connection(self) -> bool:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tor"""
        logging.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TOR –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
        
        try:
            import requests
            
            proxies = {
                'http': f'socks5://127.0.0.1:{self.tor_port}',
                'https': f'socks5://127.0.0.1:{self.tor_port}'
            }
            
            response = requests.get('http://httpbin.org/ip', proxies=proxies, timeout=30)
            
            if response.status_code == 200:
                content = response.text.strip()
                logging.info(f"‚úÖ TOR –†–ê–ë–û–¢–ê–ï–¢! IP: {content}")
                return True
            else:
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tor: {e}")
            return False

    def start_tor(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Tor —Å –ü–†–û–°–¢–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ë–ï–ó –º–æ—Å—Ç–æ–≤"""
        logging.info("üöÄ –ó–ê–ü–£–°–ö TOR –° –ü–†–û–°–¢–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô")
        
        try:
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor
            kill_existing_tor_processes()
            time.sleep(3)
            
            # –ü–æ–∏—Å–∫ Tor –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            tor_executable = self.find_tor_executable()
            if not tor_executable:
                logging.info("‚ö† Tor –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                if not self.install_tor():
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tor")
                    return False
                tor_executable = self.find_tor_executable()
                if not tor_executable:
                    logging.error("‚ùå Tor –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
            free_ports = find_free_port_range(9050, 2)
            if len(free_ports) < 2:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 2 —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–∞")
                return False
            
            self.tor_port = free_ports[0]      # SOCKS –ø–æ—Ä—Ç
            self.control_port = free_ports[1]  # Control –ø–æ—Ä—Ç
            
            logging.info(f"üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã: SOCKS={self.tor_port}, Control={self.control_port}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Tor
            import tempfile
            import getpass
            
            try:
                current_user = getpass.getuser()
            except:
                current_user = "user"
            
            temp_dir = tempfile.gettempdir()
            tor_data_dir = os.path.join(temp_dir, f"tor_data_{current_user}_{os.getpid()}")
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(tor_data_dir):
                shutil.rmtree(tor_data_dir, ignore_errors=True)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(tor_data_dir, mode=0o700, exist_ok=True)
            
            logging.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö Tor: {tor_data_dir}")
            
            # –ü–†–û–°–¢–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor –ë–ï–ó –º–æ—Å—Ç–æ–≤
            tor_config = f"""SocksPort {self.tor_port}
ControlPort {self.control_port}
DataDirectory {tor_data_dir}
Log notice stdout
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            torrc_path = os.path.join(temp_dir, f"torrc_temp_{os.getpid()}")
            with open(torrc_path, "w") as f:
                f.write(tor_config)
            
            logging.debug(f"üìÑ –ö–æ–Ω—Ñ–∏–≥ Tor —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {torrc_path}")
            logging.info("üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor (–ü–†–û–°–¢–ê–Ø, –ë–ï–ó –ú–û–°–¢–û–í):")
            logging.info(tor_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Tor
            cmd = [tor_executable, "-f", torrc_path]
            
            logging.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {' '.join(cmd)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ–≥–æ–≤
            stdout_log = os.path.join(temp_dir, f"tor_stdout_{os.getpid()}.log")
            stderr_log = os.path.join(temp_dir, f"tor_stderr_{os.getpid()}.log")
            
            with open(stdout_log, "w") as stdout_file, \
                 open(stderr_log, "w") as stderr_file:
                
                if self.system == 'windows':
                    self.tor_process = subprocess.Popen(
                        cmd,
                        stdout=stdout_file,
                        stderr=stderr_file,
                        creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
                    )
                else:
                    self.tor_process = subprocess.Popen(
                        cmd,
                        stdout=stdout_file,
                        stderr=stderr_file,
                        preexec_fn=os.setsid
                    )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.tor_data_dir = tor_data_dir
            self.torrc_path = torrc_path
            self.stdout_log = stdout_log
            self.stderr_log = stderr_log
            
            logging.info(f"üîÑ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ Tor: {self.tor_process.pid}")
            
            # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Tor
            logging.info("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê TOR...")
            port_ready = False
            bootstrap_complete = False
            
            for i in range(60):  # 60 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 2 –º–∏–Ω—É—Ç—ã
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
                if self.tor_process.poll() is not None:
                    logging.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å Tor –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {self.tor_process.poll()}")
                    self.log_tor_errors()
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
                if not port_ready and self.check_tor_port():
                    logging.info("‚úÖ Tor –ø–æ—Ä—Ç –≥–æ—Ç–æ–≤")
                    port_ready = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç bootstrap
                if port_ready and not bootstrap_complete:
                    try:
                        if os.path.exists(stdout_log):
                            with open(stdout_log, "r") as f:
                                log_content = f.read()
                                if "Bootstrapped 100%" in log_content:
                                    logging.info("‚úÖ Tor bootstrap –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ 100%")
                                    bootstrap_complete = True
                                    break
                                elif "Bootstrapped" in log_content:
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                    import re
                                    matches = re.findall(r'Bootstrapped (\d+)%', log_content)
                                    if matches:
                                        last_percent = matches[-1]
                                        logging.info(f"üîÑ Tor bootstrap: {last_percent}%")
                    except:
                        pass
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
                if i % 10 == 0:  # –ö–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥
                    logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Tor... ({i*2}/120 —Å–µ–∫—É–Ω–¥)")
            
            if not port_ready:
                logging.error("‚ùå Tor –ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                self.log_tor_errors()
                return False
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            logging.info("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø...")
            if self.test_tor_connection():
                logging.info("‚úÖ TOR –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
                return True
            else:
                logging.error("‚ùå Tor –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.log_tor_errors()
                return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {e}")
            return False

    def log_tor_errors(self):
        """–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ Tor –∏–∑ –ª–æ–≥–æ–≤"""
        logging.info("üìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í TOR...")
        
        try:
            stderr_log = getattr(self, 'stderr_log', './tor_stderr.log')
            stdout_log = getattr(self, 'stdout_log', './tor_stdout.log')
            
            if stderr_log and os.path.exists(stderr_log):
                with open(stderr_log, "r") as f:
                    stderr_content = f.read().strip()
                    if stderr_content:
                        logging.error(f"üö® –û–®–ò–ë–ö–ò TOR:\n{stderr_content}")
                    else:
                        logging.info("üìù –û—à–∏–±–∫–∏ Tor –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            if stdout_log and os.path.exists(stdout_log):
                with open(stdout_log, "r") as f:
                    stdout_content = f.read().strip()
                    if stdout_content:
                        logging.info(f"üìÑ –í–´–í–û–î TOR:\n{stdout_content}")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        if "Bootstrapped 100%" in stdout_content:
                            logging.info("‚úÖ Tor —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –Ω–∞ 100%")
                        elif "Bootstrapped" in stdout_content:
                            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
                            import re
                            matches = re.findall(r'Bootstrapped (\d+)%', stdout_content)
                            if matches:
                                last_percent = matches[-1]
                                logging.warning(f"‚ö† Tor –∑–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ {last_percent}%")
                        
                        if "Opening Socks listener" in stdout_content:
                            logging.info("‚úÖ SOCKS –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω")
                    else:
                        logging.warning("üìù –í—ã–≤–æ–¥ Tor –ø—É—Å—Ç")
                        
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ Tor: {e}")
    
    def stop_tor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor"""
        try:
            if self.tor_process:
                logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor...")
                
                if self.system == 'windows':
                    self.tor_process.terminate()
                else:
                    try:
                        os.killpg(os.getpgid(self.tor_process.pid), 15)  # SIGTERM
                    except:
                        self.tor_process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.tor_process.wait(timeout=5)
                    logging.info("‚úì Tor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    logging.warning("‚ö† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ Tor...")
                    if self.system == 'windows':
                        self.tor_process.kill()
                    else:
                        try:
                            os.killpg(os.getpgid(self.tor_process.pid), 9)  # SIGKILL
                        except:
                            self.tor_process.kill()
                    
                    self.tor_process.wait(timeout=3)
                    logging.info("‚úì Tor –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                self.tor_process = None
                
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files = [
                getattr(self, 'torrc_path', None),
                getattr(self, 'stdout_log', None),
                getattr(self, 'stderr_log', None)
            ]
            
            for temp_file in temp_files:
                try:
                    if temp_file and os.path.exists(temp_file):
                        os.remove(temp_file)
                        logging.debug(f"üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {temp_file}")
                except Exception as e:
                    logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {temp_file}: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            tor_data_dir = getattr(self, 'tor_data_dir', None)
            try:
                if tor_data_dir and os.path.exists(tor_data_dir):
                    shutil.rmtree(tor_data_dir, ignore_errors=True)
                    logging.debug(f"üóë –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {tor_data_dir}")
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tor_data_dir}: {e}")
                    
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor: {e}")

class AvisoAutomation:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Aviso"""
    
    def __init__(self):
        self.setup_logging()
        self.driver = None
        self.tor_manager = SimpleTorManager()  # –£–ü–†–û–©–ï–ù–ù–´–ô Tor –º–µ–Ω–µ–¥–∂–µ—Ä
        self.ua_manager = UserAgentManager()
        self.gecko_manager = GeckoDriverManager()
        self.cookies_file = "aviso_cookies.pkl"
        self.original_ip = None  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π IP
        self.use_tor = True  # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Tor
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ª–æ–≥–∏–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        self.username = "Aleksey345"
        self.password = "123456"
        self.base_url = "https://aviso.bz"
        
        logging.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Aviso Automation Bot")
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        log_filename = f"aviso_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_format = "%(asctime)s [%(levelname)s] %(message)s"
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in logging.root.handlers[:]:
            logging.root.removeHandler(handler)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        logging.basicConfig(
            level=logging.DEBUG,
            format=log_format,
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler(log_filename, encoding='utf-8')
            ]
        )
        
        logging.info(f"üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {log_filename}")

    def get_current_ip_without_proxy(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –í–ù–ï–®–ù–ï–ì–û IP –∞–¥—Ä–µ—Å–∞ –ë–ï–ó –ø—Ä–æ–∫—Å–∏"""
        logging.info("üîç –ü–û–õ–£–ß–ï–ù–ò–ï –í–ù–ï–®–ù–ï–ì–û IP –ë–ï–ó –ü–†–û–ö–°–ò...")
        
        test_services = [
            'https://api.ipify.org?format=text',
            'https://icanhazip.com/',
            'https://checkip.amazonaws.com/'
        ]
        
        for i, service in enumerate(test_services, 1):
            try:
                logging.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ {i}/{len(test_services)}: {service}")
                
                response = requests.get(service, timeout=10)
                response.raise_for_status()
                
                external_ip = response.text.strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ IP –≤–∞–ª–∏–¥–Ω—ã–π
                import re
                ip_pattern = r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$'
                if re.match(ip_pattern, external_ip):
                    logging.info(f"‚úÖ –í–Ω–µ—à–Ω–∏–π IP –ø–æ–ª—É—á–µ–Ω: {external_ip}")
                    return external_ip
                else:
                    logging.warning(f"‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç IP: {external_ip}")
                    continue
                    
            except requests.exceptions.Timeout:
                logging.warning(f"‚ö† –¢–∞–π–º–∞—É—Ç –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ {service}")
                continue
            except Exception as e:
                logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP –æ—Ç {service}: {e}")
                continue
        
        logging.warning("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        return None

    def find_firefox_binary(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Firefox"""
        possible_paths = []
        
        if self.tor_manager.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/firefox',
                f"{os.environ.get('PREFIX', '')}/bin/firefox"
            ]
        elif self.tor_manager.system == 'linux':
            possible_paths = [
                '/usr/bin/firefox',
                '/usr/local/bin/firefox',
                '/opt/firefox/firefox',
                '/snap/bin/firefox'
            ]
        elif self.tor_manager.system == 'windows':
            possible_paths = [
                r"C:\Program Files\Mozilla Firefox\firefox.exe",
                r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe"
            ]
        elif self.tor_manager.system == 'darwin':
            possible_paths = [
                '/Applications/Firefox.app/Contents/MacOS/firefox'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É—Ç—å
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω Firefox: {path}")
                return path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ PATH
        if self.tor_manager.command_exists('firefox'):
            logging.info("‚úì Firefox –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return 'firefox'
        
        return None

    def setup_driver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Firefox —Å –∏–ª–∏ –±–µ–∑ Tor"""
        logging.info("üåê –ù–ê–°–¢–†–û–ô–ö–ê –ë–†–ê–£–ó–ï–†–ê FIREFOX...")
        
        # –ü–æ–ª—É—á–∞–µ–º –í–ù–ï–®–ù–ò–ô IP –ë–ï–ó –ø—Ä–æ–∫—Å–∏
        logging.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏...")
        self.original_ip = self.get_current_ip_without_proxy()
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Tor
        logging.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor...")
        if self.tor_manager.start_tor():
            logging.info("‚úÖ Tor –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–µ–º Tor –ø—Ä–æ–∫—Å–∏.")
            self.use_tor = True
        else:
            logging.warning("‚ö† Tor –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å. –†–∞–±–æ—Ç–∞–µ–º –ë–ï–ó –ø—Ä–æ–∫—Å–∏.")
            self.use_tor = False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º User-Agent –¥–ª—è Firefox
            user_agent = self.ua_manager.get_user_agent(self.username)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ geckodriver
            logging.info("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ geckodriver...")
            geckodriver_path = self.gecko_manager.get_driver_path()
            logging.info(f"‚úì Geckodriver: {geckodriver_path}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox
            firefox_options = Options()
            
            if self.use_tor:
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Firefox —Å Tor
                logging.info(f"üîå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ Firefox: SOCKS5 127.0.0.1:{self.tor_manager.tor_port}")
                firefox_options.set_preference("network.proxy.type", 1)  # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
                firefox_options.set_preference("network.proxy.socks", "127.0.0.1")
                firefox_options.set_preference("network.proxy.socks_port", self.tor_manager.tor_port)
                firefox_options.set_preference("network.proxy.socks_version", 5)
                firefox_options.set_preference("network.proxy.socks_remote_dns", True)  # DNS —á–µ—Ä–µ–∑ Tor
                
                # –û—Ç–∫–ª—é—á–∞–µ–º HTTP –∏ HTTPS –ø—Ä–æ–∫—Å–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SOCKS)
                firefox_options.set_preference("network.proxy.http", "")
                firefox_options.set_preference("network.proxy.http_port", 0)
                firefox_options.set_preference("network.proxy.ssl", "")
                firefox_options.set_preference("network.proxy.ssl_port", 0)
            else:
                logging.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox –ë–ï–ó –ø—Ä–æ–∫—Å–∏")
                # –ü—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
                firefox_options.set_preference("network.proxy.type", 0)  # –ë–µ–∑ –ø—Ä–æ–∫—Å–∏
            
            # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox
            firefox_options.set_preference("general.useragent.override", user_agent)
            firefox_options.set_preference("dom.webdriver.enabled", False)
            firefox_options.set_preference("useAutomationExtension", False)
            firefox_options.set_preference("network.http.use-cache", False)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º WebRTC –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ IP
            firefox_options.set_preference("media.peerconnection.enabled", False)
            firefox_options.set_preference("media.navigator.enabled", False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
            firefox_options.set_preference("privacy.resistFingerprinting", True)
            firefox_options.set_preference("privacy.trackingprotection.enabled", True)
            firefox_options.set_preference("geo.enabled", False)
            firefox_options.set_preference("browser.safebrowsing.downloads.remote.enabled", False)
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é
            firefox_options.set_preference("app.update.enabled", False)
            firefox_options.set_preference("toolkit.telemetry.enabled", False)
            firefox_options.set_preference("datareporting.healthreport.uploadEnabled", False)
            
            # –î–ª—è Termux
            if self.tor_manager.is_termux:
                firefox_options.add_argument("--no-sandbox")
                firefox_options.add_argument("--disable-dev-shm-usage")
            
            # –ü–æ–∏—Å–∫ Firefox
            firefox_binary = self.find_firefox_binary()
            if firefox_binary and firefox_binary != 'firefox':
                firefox_options.binary_location = firefox_binary
            
            logging.info("üöÄ –ó–∞–ø—É—Å–∫ Firefox...")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—É—Ç–µ–º –∫ geckodriver
            service = Service(executable_path=geckodriver_path)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ Firefox
            self.driver = webdriver.Firefox(options=firefox_options, service=service)
            
            # –¢–∞–π–º–∞—É—Ç—ã
            self.driver.set_page_load_timeout(120)
            self.driver.implicitly_wait(20)
            
            logging.info("‚úÖ Firefox –∑–∞–ø—É—â–µ–Ω!")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firefox: {e}")
            return False

    def save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies"""
        try:
            cookies = self.driver.get_cookies()
            with open(self.cookies_file, 'wb') as f:
                pickle.dump(cookies, f)
            logging.info(f"üíæ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.cookies_file}")
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
    
    def load_cookies(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies"""
        try:
            if os.path.exists(self.cookies_file):
                self.driver.get(self.base_url)
                HumanBehaviorSimulator.random_sleep(2, 4)
                
                with open(self.cookies_file, 'rb') as f:
                    cookies = pickle.load(f)
                
                for cookie in cookies:
                    try:
                        self.driver.add_cookie(cookie)
                    except Exception as e:
                        logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cookie: {e}")
                
                logging.info("‚úì Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")
        
        return False
    
    def check_authorization(self) -> bool:
        """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –Ω–∞ –¢–ï–ö–£–©–ï–ô —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            login_forms = self.driver.find_elements(By.NAME, "username")
            if login_forms:
                logging.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                return False
            else:
                logging.info("‚úì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return True
                
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logging.info("üîê –ù–ê–ß–ê–õ–û –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            logging.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...")
            self.driver.get(f"{self.base_url}/login")
            HumanBehaviorSimulator.random_sleep(3, 8)
            
            wait = WebDriverWait(self.driver, 30)
            
            # –í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–µ–π
            logging.info("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞...")
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
            ActionChains(self.driver).move_to_element(username_field).click().perform()
            HumanBehaviorSimulator.human_like_typing(username_field, self.username, self.driver)
            logging.info(f"‚úì –õ–æ–≥–∏–Ω '{self.username}' –≤–≤–µ–¥–µ–Ω")
            
            # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–µ–π
            password_field = self.driver.find_element(By.NAME, "password")
            ActionChains(self.driver).move_to_element(password_field).click().perform()
            HumanBehaviorSimulator.human_like_typing(password_field, self.password, self.driver)
            logging.info("‚úì –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω")
            
            # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
            login_button = self.driver.find_element(By.ID, "button-login")
            HumanBehaviorSimulator.random_sleep(1, 4)
            ActionChains(self.driver).move_to_element(login_button).click().perform()
            logging.info("‚úì –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–∞–∂–∞—Ç–∞")
            
            # –ñ–¥–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–π
            HumanBehaviorSimulator.random_sleep(5, 12)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º 2FA –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 2FA
            current_url = self.driver.current_url
            if "/2fa" in current_url:
                logging.info("üîê –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2FA")
                
                try:
                    code_field = wait.until(EC.presence_of_element_located((By.NAME, "code")))
                    
                    print("\n" + "="*50)
                    print("üîê –¢–†–ï–ë–£–ï–¢–°–Ø –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø")
                    print("üìß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥")
                    print("="*50)
                    
                    verification_code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: ").strip()
                    
                    if verification_code and verification_code.isdigit():
                        ActionChains(self.driver).move_to_element(code_field).click().perform()
                        HumanBehaviorSimulator.human_like_typing(code_field, verification_code, self.driver)
                        
                        # –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                        confirm_buttons = self.driver.find_elements(By.CSS_SELECTOR, "button.button_theme_blue")
                        if confirm_buttons:
                            ActionChains(self.driver).move_to_element(confirm_buttons[0]).click().perform()
                            logging.info("‚úì –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        
                        # –ñ–¥–µ–º –ø–æ—Å–ª–µ 2FA
                        HumanBehaviorSimulator.random_sleep(5, 12)
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 2FA: {e}")
                    return False
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ - –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞
            login_forms = self.driver.find_elements(By.NAME, "username")
            if not login_forms:
                logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                self.save_cookies()
                return True
            else:
                logging.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def random_mouse_movement(self):
        """–°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        try:
            viewport_size = self.driver.get_window_size()
            
            current_position = (
                random.randint(50, viewport_size['width'] - 50),
                random.randint(50, viewport_size['height'] - 50)
            )
            
            new_position = (
                random.randint(50, viewport_size['width'] - 50),
                random.randint(50, viewport_size['height'] - 50)
            )
            
            curve_points = HumanBehaviorSimulator.generate_bezier_curve(
                current_position, new_position
            )
            
            actions = ActionChains(self.driver)
            for i, point in enumerate(curve_points):
                if i == 0:
                    continue
                    
                prev_point = curve_points[i-1]
                offset_x = point[0] - prev_point[0]
                offset_y = point[1] - prev_point[1]
                
                actions.move_by_offset(offset_x, offset_y)
                time.sleep(random.uniform(0.01, 0.05))
            
            actions.perform()
            logging.debug(f"üñ± –î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏: {current_position} ‚Üí {new_position}")
            
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏: {e}")
    
    def random_scroll(self):
        """–°–ª—É—á–∞–π–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            scroll_direction = random.choice(['up', 'down'])
            scroll_amount = random.randint(100, 500)
            
            if scroll_direction == 'down':
                self.driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
                logging.debug(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑: {scroll_amount}px")
            else:
                self.driver.execute_script(f"window.scrollBy(0, -{scroll_amount});")
                logging.debug(f"üìú –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö: {scroll_amount}px")
            
            HumanBehaviorSimulator.random_sleep(0.5, 2.0)
            
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏: {e}")
    
    def get_youtube_tasks(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π YouTube"""
        logging.info("üìã –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π YouTube...")
        
        try:
            # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞–Ω–∏–π
            logging.info("üåê –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞–Ω–∏–π YouTube...")
            self.driver.get(f"{self.base_url}/tasks-youtube")
            HumanBehaviorSimulator.random_sleep(3, 8)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for _ in range(random.randint(2, 4)):
                self.random_scroll()
                HumanBehaviorSimulator.random_sleep(1, 4)
                self.random_mouse_movement()
            
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π
            task_rows = self.driver.find_elements(By.CSS_SELECTOR, "tr[class^='ads_']")
            tasks = []
            
            for i, row in enumerate(task_rows):
                try:
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∑–∞–¥–∞–Ω–∏—è
                    class_name = row.get_attribute('class')
                    task_id_match = re.search(r'ads_(\d+)', class_name)
                    if not task_id_match:
                        continue
                    
                    task_id = task_id_match.group(1)
                    
                    # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"
                    start_button = row.find_element(
                        By.CSS_SELECTOR, 
                        f"span[id='link_ads_start_{task_id}']"
                    )
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑ onclick
                    onclick_attr = start_button.get_attribute('onclick')
                    time_match = re.search(r"start_youtube_new\(\d+,\s*'(\d+)'\)", onclick_attr)
                    watch_time = int(time_match.group(1)) if time_match else 10
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –≤–∏–¥–µ–æ
                    video_url = start_button.get_attribute('title') or "unknown"
                    
                    task_info = {
                        'id': task_id,
                        'element': start_button,
                        'watch_time': watch_time,
                        'video_url': video_url,
                        'row': row
                    }
                    
                    tasks.append(task_info)
                    logging.info(f"‚úì –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ {task_id}: {watch_time}—Å, {video_url}")
                    
                    # –ò–º–∏—Ç–∞—Ü–∏—è —á—Ç–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
                    if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                        ActionChains(self.driver).move_to_element(row).perform()
                        HumanBehaviorSimulator.random_sleep(1, 3)
                
                except Exception as e:
                    logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞–Ω–∏—è {i}: {e}")
                    continue
            
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
            return tasks
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {e}")
            return []
    
    def wait_for_element(self, by: By, value: str, timeout: int = 20) -> Optional[object]:
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞"""
        try:
            wait = WebDriverWait(self.driver, timeout)
            element = wait.until(EC.presence_of_element_located((by, value)))
            logging.debug(f"‚úì –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: {value}")
            return element
        except TimeoutException:
            logging.debug(f"‚è∞ –≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ {timeout}—Å: {value}")
            return None
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ {value}: {e}")
            return None
    
    def handle_youtube_ads(self) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ YouTube"""
        logging.info("üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–ª–∞–º—ã –Ω–∞ YouTube...")
        
        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            HumanBehaviorSimulator.random_sleep(3, 8)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∫–ª–∞–º—ã
            ad_indicators = [
                "ytp-ad-badge",
                "[id*='ad-badge']",
                ".ytp-ad-text",
                "[aria-label*='—Ä–µ–∫–ª–∞–º–∞']",
                "[aria-label*='–†–µ–∫–ª–∞–º–∞']",
                "[aria-label*='Ad']",
                "[aria-label*='advertisement']"
            ]
            
            ad_found = False
            for selector in ad_indicators:
                try:
                    ad_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    if ad_elements and any(el.is_displayed() for el in ad_elements):
                        ad_found = True
                        logging.info("üì∫ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∫–ª–∞–º–∞")
                        break
                except:
                    continue
            
            if ad_found:
                # –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ –∏–ª–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
                skip_found = False
                auto_start_found = False
                
                for attempt in range(45):
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞
                    skip_selectors = [
                        ".ytp-ad-skip-button",
                        ".ytp-ad-skip-button-modern",
                        "[class*='skip']",
                        "button[class*='skip']"
                    ]
                    
                    for selector in skip_selectors:
                        try:
                            skip_buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            for button in skip_buttons:
                                if button.is_displayed() and button.is_enabled():
                                    logging.info("‚è≠ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —Ä–µ–∫–ª–∞–º—ã")
                                    ActionChains(self.driver).move_to_element(button).click().perform()
                                    skip_found = True
                                    HumanBehaviorSimulator.random_sleep(2, 5)
                                    break
                            if skip_found:
                                break
                        except:
                            continue
                    
                    if skip_found:
                        break
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ (–ø–æ—è–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞)
                    timer_selectors = [
                        ".ytwPlayerTimeDisplayTime",
                        "[class*='time-display']",
                        ".ytp-time-current"
                    ]
                    
                    for selector in timer_selectors:
                        try:
                            timers = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            if timers and any(t.is_displayed() and t.text.strip() for t in timers):
                                logging.info("‚è∞ –í–∏–¥–µ–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                                auto_start_found = True
                                break
                        except:
                            continue
                    
                    if auto_start_found:
                        break
                    
                    # –°–ª—É—á–∞–π–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
                    if random.random() < 0.3:
                        self.random_mouse_movement()
                    
                    time.sleep(1)
                
                if not skip_found and not auto_start_found:
                    logging.warning("‚ö† –†–µ–∫–ª–∞–º–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–ª–∞–º—ã: {e}")
            return False
    
    def wait_for_video_time(self, required_seconds: int) -> bool:
        """–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
        logging.info(f"‚è± –û–ñ–ò–î–ê–ù–ò–ï {required_seconds} –°–ï–ö–£–ù–î –ü–†–û–°–ú–û–¢–†–ê...")
        
        try:
            last_time = 0
            pause_counter = 0
            no_timer_counter = 0
            start_wait_time = time.time()
            max_wait_time = required_seconds + 90
            
            while True:
                current_wait_time = time.time() - start_wait_time
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
                if current_wait_time > max_wait_time:
                    logging.warning(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait_time}—Å)")
                    return True  # –°—á–∏—Ç–∞–µ–º —á—Ç–æ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ
                
                # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–∞–π–º–µ—Ä–∞
                timer_selectors = [
                    ".ytwPlayerTimeDisplayTime",
                    "[class*='time-display']",
                    ".ytp-time-current",
                    "[role='text'][aria-label*='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']"
                ]
                
                current_time_seconds = 0
                timer_found = False
                
                for selector in timer_selectors:
                    try:
                        timers = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        for timer in timers:
                            if timer.is_displayed():
                                timer_text = timer.text.strip()
                                if ':' in timer_text:
                                    try:
                                        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ (mm:ss –∏–ª–∏ hh:mm:ss)
                                        time_parts = timer_text.split(':')
                                        if len(time_parts) == 2:  # mm:ss
                                            minutes, seconds = map(int, time_parts)
                                            current_time_seconds = minutes * 60 + seconds
                                        elif len(time_parts) == 3:  # hh:mm:ss
                                            hours, minutes, seconds = map(int, time_parts)
                                            current_time_seconds = hours * 3600 + minutes * 60 + seconds
                                        
                                        timer_found = True
                                        no_timer_counter = 0
                                        break
                                    except (ValueError, IndexError):
                                        continue
                        
                        if timer_found:
                            break
                    except:
                        continue
                
                if timer_found:
                    logging.debug(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time_seconds}—Å (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {required_seconds}—Å)")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—É–∑—É
                    if current_time_seconds == last_time:
                        pause_counter += 1
                        if pause_counter >= 5:  # 5 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                            logging.info("‚è∏ –í–∏–¥–µ–æ –Ω–∞ –ø–∞—É–∑–µ, –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞...")
                            self.try_play_video()
                            pause_counter = 0
                    else:
                        pause_counter = 0
                    
                    last_time = current_time_seconds
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    if current_time_seconds >= required_seconds:
                        logging.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {current_time_seconds}—Å")
                        return True
                else:
                    no_timer_counter += 1
                    logging.debug(f"‚ö† –¢–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {no_timer_counter})")
                    
                    # –ï—Å–ª–∏ –¥–æ–ª–≥–æ –Ω–µ—Ç —Ç–∞–π–º–µ—Ä–∞, –ø—Ä–æ–±—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ
                    if no_timer_counter >= 8:
                        logging.info("üé¨ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ (—Ç–∞–π–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                        self.try_play_video()
                        no_timer_counter = 0
                
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                if random.random() < 0.1:  # 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    self.random_mouse_movement()
                
                if random.random() < 0.05:  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                    self.random_scroll()
                
                time.sleep(1)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
            return False
    
    def try_play_video(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞ –ø–∞—É–∑–µ"""
        try:
            # –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–∫–∏ play
            play_selectors = [
                ".yt-icon-shape svg[viewBox*='24']",
                "button[title*='–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏']",
                "button[title*='Play']",
                ".ytp-play-button",
                "[aria-label*='–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ']",
                "[aria-label*='Play']"
            ]
            
            for selector in play_selectors:
                try:
                    play_buttons = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for button in play_buttons:
                        if button.is_displayed():
                            try:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∫–Ω–æ–ø–∫–∞ play (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
                                svg_path = button.find_elements(By.TAG_NAME, "path")
                                for path in svg_path:
                                    path_d = path.get_attribute("d")
                                    if path_d and ("m7 4 12 8-12 8V4z" in path_d or "M8 5v14l11-7z" in path_d):
                                        logging.info("‚ñ∂ –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
                                        ActionChains(self.driver).move_to_element(button).click().perform()
                                        HumanBehaviorSimulator.random_sleep(1, 3)
                                        return
                            except:
                                continue
                except:
                    continue
            
            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ –≤–∏–¥–µ–æ
            try:
                video_elements = self.driver.find_elements(By.TAG_NAME, "video")
                if video_elements:
                    video = video_elements[0]
                    if video.is_displayed():
                        logging.info("üé¨ –ö–ª–∏–∫ –ø–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
                        ActionChains(self.driver).move_to_element(video).click().perform()
                        HumanBehaviorSimulator.random_sleep(1, 3)
            except:
                pass
            
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ: {e}")
    
    def execute_youtube_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è YouTube"""
        task_id = task['id']
        watch_time = task['watch_time']
        video_url = task['video_url']
        
        logging.info(f"üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è {task_id}: {watch_time}—Å")
        
        original_window = self.driver.current_window_handle
        
        try:
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –∑–∞–¥–∞–Ω–∏—é
            ActionChains(self.driver).move_to_element(task['row']).perform()
            HumanBehaviorSimulator.random_sleep(1, 4)
            
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            random_delay = random.uniform(2, 15)
            logging.info(f"‚è≥ –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ {random_delay:.1f}—Å –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º")
            time.sleep(random_delay)
            
            # –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ"
            start_button = task['element']
            
            # –î–≤–∏–∂–µ–Ω–∏–µ –∫ –∫–Ω–æ–ø–∫–µ –ø–æ –∫—Ä–∏–≤–æ–π
            try:
                viewport_size = self.driver.get_window_size()
                current_pos = (viewport_size['width'] // 2, viewport_size['height'] // 2)
                button_rect = start_button.rect
                target_pos = (
                    button_rect['x'] + button_rect['width'] // 2,
                    button_rect['y'] + button_rect['height'] // 2
                )
                
                curve_points = HumanBehaviorSimulator.generate_bezier_curve(current_pos, target_pos)
                actions = ActionChains(self.driver)
                
                for i, point in enumerate(curve_points[1:], 1):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É
                    prev_point = curve_points[i-1]
                    offset_x = point[0] - prev_point[0]
                    offset_y = point[1] - prev_point[1]
                    actions.move_by_offset(offset_x, offset_y)
                    time.sleep(random.uniform(0.01, 0.03))
                
                actions.click(start_button).perform()
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏, –æ–±—ã—á–Ω—ã–π –∫–ª–∏–∫: {e}")
                ActionChains(self.driver).move_to_element(start_button).click().perform()
            
            logging.info(f"üñ± –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞–Ω–∏—é {task_id}")
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è YouTube
            HumanBehaviorSimulator.random_sleep(5, 12)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É YouTube
            all_windows = self.driver.window_handles
            
            youtube_window = None
            for window in all_windows:
                if window != original_window:
                    self.driver.switch_to.window(window)
                    if "youtube.com" in self.driver.current_url.lower():
                        youtube_window = window
                        break
            
            if not youtube_window:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∫–ª–∞–¥–∫—É YouTube")
                return False
            
            logging.info("üì∫ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É YouTube")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã
            self.handle_youtube_ads()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            if self.wait_for_video_time(watch_time):
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞
                extra_delay = random.uniform(3, 30)
                logging.info(f"‚è≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ {extra_delay:.1f}—Å")
                
                # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                for _ in range(int(extra_delay // 4)):
                    self.random_mouse_movement()
                    time.sleep(random.uniform(2, 4))
                
                # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                self.driver.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º YouTube
                self.driver.switch_to.window(original_window)
                logging.info("üîô –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞–Ω–∏–π")
                
                HumanBehaviorSimulator.random_sleep(3, 8)
                
                # –ü–æ–∏—Å–∫ –∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirm_button_id = f"ads_btn_confirm_{task_id}"
                confirm_button = self.wait_for_element(By.ID, confirm_button_id, 20)
                
                if confirm_button and confirm_button.is_displayed():
                    ActionChains(self.driver).move_to_element(confirm_button).click().perform()
                    logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞–Ω–∏—è {task_id}")
                    HumanBehaviorSimulator.random_sleep(3, 8)
                    return True
                else:
                    logging.error(f"‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}")
                    return False
            else:
                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task_id}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            
            # –ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            try:
                all_windows = self.driver.window_handles
                if len(all_windows) > 1:
                    for window in all_windows:
                        if window != original_window:
                            self.driver.switch_to.window(window)
                            self.driver.close()
                    self.driver.switch_to.window(original_window)
                else:
                    self.driver.switch_to.window(original_window)
            except Exception as cleanup_error:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–∫–æ–Ω: {cleanup_error}")
            
            return False
    
    def execute_all_tasks(self) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π"""
        logging.info("üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π...")
        
        tasks = self.get_youtube_tasks()
        if not tasks:
            logging.info("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            return 0
        
        completed_tasks = 0
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        random.shuffle(tasks)
        
        for i, task in enumerate(tasks):
            logging.info(f"üìù –ó–∞–¥–∞–Ω–∏–µ {i+1}/{len(tasks)}")
            
            try:
                if self.execute_youtube_task(task):
                    completed_tasks += 1
                    logging.info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ {task['id']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ({completed_tasks}/{len(tasks)})")
                else:
                    logging.warning(f"‚ö† –ó–∞–¥–∞–Ω–∏–µ {task['id']} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
                if i < len(tasks) - 1:  # –ù–µ –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                    pause_time = random.uniform(45, 120)
                    logging.info(f"‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏: {pause_time:.1f}—Å")
                    
                    # –°–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
                    for _ in range(int(pause_time // 12)):
                        if random.random() < 0.5:
                            self.random_mouse_movement()
                        if random.random() < 0.3:
                            self.random_scroll()
                        time.sleep(random.uniform(10, 15))
                
            except Exception as e:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è {task['id']}: {e}")
                continue
        
        logging.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π: {completed_tasks}/{len(tasks)}")
        return completed_tasks
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            if self.driver:
                self.driver.quit()
                logging.info("üö™ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
        
        try:
            if self.use_tor:
                self.tor_manager.stop_tor()
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor: {e}")
    
    def run_cycle(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        logging.info("üîÑ –ù–ê–ß–ê–õ–û –¶–ò–ö–õ–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ó–ê–î–ê–ù–ò–ô")
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if not self.setup_driver():
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                return False
            
            # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ cookies
            cookies_loaded = self.load_cookies()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if not cookies_loaded or not self.check_authorization():
                # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                if not self.login():
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è")
                    return False
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
            completed_tasks = self.execute_all_tasks()
            
            if completed_tasks > 0:
                logging.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_tasks} –∑–∞–¥–∞–Ω–∏–π")
            else:
                logging.info("‚Ñπ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
            return False
        finally:
            self.cleanup()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        logging.info("ü§ñ –ó–ê–ü–£–°–ö AVISO AUTOMATION BOT - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø")
        
        cycle_count = 0
        consecutive_failures = 0
        max_consecutive_failures = 3
        
        try:
            while True:
                cycle_count += 1
                logging.info(f"üîÑ –¶–ò–ö–õ #{cycle_count}")
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∞
                success = self.run_cycle()
                
                if success:
                    consecutive_failures = 0
                    
                    # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (1 –º–∏–Ω—É—Ç–∞ - 2 —á–∞—Å–∞)
                    pause_minutes = random.uniform(1, 120)
                    pause_seconds = pause_minutes * 60
                    
                    next_run_time = datetime.now() + timedelta(seconds=pause_seconds)
                    
                    logging.info(f"üò¥ –ü–∞—É–∑–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞: {pause_minutes:.1f} –º–∏–Ω—É—Ç")
                    logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run_time.strftime('%Y-%m-%d %H:%M:%S')}")
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–∞—É–∑—É –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
                    pause_intervals = max(1, int(pause_seconds // 60))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    interval_duration = pause_seconds / pause_intervals
                    
                    for i in range(pause_intervals):
                        time.sleep(interval_duration)
                        remaining_minutes = pause_minutes - ((i + 1) * interval_duration / 60)
                        if remaining_minutes > 1:
                            logging.debug(f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞: {remaining_minutes:.1f} –º–∏–Ω—É—Ç")
                else:
                    consecutive_failures += 1
                    
                    if consecutive_failures >= max_consecutive_failures:
                        logging.error(f"üí• –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥—Ä—è–¥ ({consecutive_failures})")
                        logging.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê - –û–°–¢–ê–ù–û–í–ö–ê –†–ê–ë–û–¢–´")
                        break
                    else:
                        # –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—É–∑–∞ –∫–æ—Ä–æ—á–µ
                        pause_minutes = random.uniform(5, 15)
                    
                    logging.warning(f"‚ö† –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{cycle_count}, –ø–∞—É–∑–∞ {pause_minutes:.1f} –º–∏–Ω—É—Ç")
                    time.sleep(pause_minutes * 60)
        
        except KeyboardInterrupt:
            logging.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        except Exception as e:
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            self.cleanup()
            logging.info("üëã –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    print("ü§ñ Aviso YouTube Tasks Automation Bot - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫...")
    print("‚ö†  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!")
    print("üîß –§–ò–ù–ê–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   ‚úÖ –£–ë–†–ê–ù–´ –í–°–ï –ú–û–°–¢–´ TOR - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    print("   ‚úÖ –£–ø—Ä–æ—â–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor –¥–æ –º–∏–Ω–∏–º—É–º–∞")
    print("   ‚úÖ Fallback —Ä–µ–∂–∏–º: —Ä–∞–±–æ—Ç–∞ –ë–ï–ó Tor –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
    print("   ‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
    print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
    print("   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tor")
    print("üìã –§—É–Ω–∫—Ü–∏–∏:")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ aviso.bz")
    print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—É YouTube")
    print("   - –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
    print("   - –†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Tor –ø—Ä–æ–∫—Å–∏ –ò–õ–ò –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (fallback)")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ geckodriver")
    print("   - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π User-Agent –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("   - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ")
    print("   - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Termux/Android")
    print("   - –ü–†–û–°–¢–û–ï –ò –ù–ê–î–ï–ñ–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 80)
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot = AvisoAutomation()
    
    try:
        bot.run()
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        sys.exit(1)
    finally:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()