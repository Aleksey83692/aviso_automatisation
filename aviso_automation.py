#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Aviso YouTube Tasks Automation Script - –§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –£–±—Ä–∞–Ω—ã –í–°–ï –º–æ—Å—Ç—ã Tor - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
- –£–ø—Ä–æ—â–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor
- –î–æ–±–∞–≤–ª–µ–Ω fallback –±–µ–∑ Tor –µ—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
- –¢–û–ß–ï–ß–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç Tor –¥–æ 20 –º–∏–Ω—É—Ç
- –£–±—Ä–∞–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –≤–∫–ª–∞–¥–æ–∫
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º—ã—à–∏
- –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import time
import random
import json
import logging
import subprocess
import platform
import re
import pickle
import hashlib
import shutil
import zipfile
import stat
import socket
import urllib3
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Optional, Tuple
import math

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ —Å –∞–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
def install_requirements():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'selenium',
        'requests',
        'beautifulsoup4',
        'fake-useragent',
        'webdriver-manager'
    ]
    
    logging.info("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    for package in required_packages:
        try:
            package_name = package.split('[')[0].replace('-', '_')
            __import__(package_name)
            logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ImportError:
            logging.info(f"‚ö† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø–∞–∫–µ—Ç {package}...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", package], 
                                    stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.CalledProcessError as e:
                logging.error(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞ {package}: {e}")
                try:
                    logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}...")
                    subprocess.check_call([sys.executable, "-m", "pip", "install", "--user", package],
                                        stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    logging.info(f"‚úì –ü–∞–∫–µ—Ç {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ --user")
                except subprocess.CalledProcessError:
                    logging.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_requirements()

# –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
try:
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.action_chains import ActionChains
    from selenium.webdriver.firefox.options import Options
    from selenium.webdriver.firefox.service import Service
    from selenium.common.exceptions import *
    from selenium.webdriver.common.keys import Keys
    try:
        from webdriver_manager.firefox import GeckoDriverManager as WDMGeckoDriverManager
    except ImportError:
        WDMGeckoDriverManager = None
    import requests
    from bs4 import BeautifulSoup
    from fake_useragent import UserAgent
except ImportError as e:
    logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    logging.error("üìã –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é:")
    logging.error("pip install selenium requests beautifulsoup4 fake-useragent webdriver-manager")
    sys.exit(1)

def kill_existing_tor_processes():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Tor"""
    try:
        logging.info("üîÑ –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor...")
        
        system = platform.system().lower()
        is_termux = 'com.termux' in os.environ.get('PREFIX', '') or '/data/data/com.termux' in os.environ.get('HOME', '')
        
        if is_termux or system == 'linux':
            # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã tor
            try:
                subprocess.run(['pkill', '-f', 'tor'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ killall
            try:
                subprocess.run(['killall', 'tor'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
                
        elif system == 'windows':
            try:
                subprocess.run(['taskkill', '/F', '/IM', 'tor.exe'], capture_output=True, timeout=10)
                time.sleep(2)
            except:
                pass
        
        logging.info("‚úì –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor: {e}")

def find_free_port_range(start_port: int, count: int = 2) -> List[int]:
    """–ü–æ–∏—Å–∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –ø–æ–¥—Ä—è–¥"""
    free_ports = []
    
    for port in range(start_port, start_port + 1000):
        if len(free_ports) >= count:
            break
            
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                s.bind(('127.0.0.1', port))
                free_ports.append(port)
        except OSError:
            free_ports = []  # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ
            continue
    
    if len(free_ports) >= count:
        return free_ports[:count]
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ä—è–¥, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
    import random
    fallback_ports = []
    for _ in range(count):
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('127.0.0.1', 0))
            fallback_ports.append(s.getsockname()[1])
    
    return fallback_ports

class GeckoDriverManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è geckodriver"""
    
    def __init__(self):
        self.system = platform.system().lower()
        self.is_termux = self.detect_termux()
        self.driver_path = None
        
    def detect_termux(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ Termux"""
        return 'com.termux' in os.environ.get('PREFIX', '') or \
               '/data/data/com.termux' in os.environ.get('HOME', '')
    
    def get_latest_geckodriver_version(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ geckodriver"""
        try:
            response = requests.get('https://api.github.com/repos/mozilla/geckodriver/releases/latest', timeout=10)
            response.raise_for_status()
            data = response.json()
            return data['tag_name'].lstrip('v')
        except Exception as e:
            logging.warning(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é geckodriver: {e}")
            return "0.33.0"  # –§–æ–ª–ª–±—ç–∫ –≤–µ—Ä—Å–∏—è
    
    def download_geckodriver(self, version: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ geckodriver"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            if self.is_termux:
                platform_name = "linux-aarch64"
                if "aarch64" not in platform.machine():
                    platform_name = "linux32"
            elif self.system == 'linux':
                arch = platform.machine()
                if arch == 'x86_64':
                    platform_name = "linux64"
                elif arch == 'aarch64':
                    platform_name = "linux-aarch64"
                else:
                    platform_name = "linux32"
            elif self.system == 'windows':
                arch = platform.machine()
                if arch == 'AMD64':
                    platform_name = "win64"
                else:
                    platform_name = "win32"
            elif self.system == 'darwin':
                arch = platform.machine()
                if arch == 'arm64':
                    platform_name = "macos-aarch64"
                else:
                    platform_name = "macos"
            else:
                logging.error(f"‚úó –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.system}")
                return None
            
            # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            if self.system == 'windows':
                filename = f"geckodriver-v{version}-{platform_name}.zip"
                executable_name = "geckodriver.exe"
            else:
                filename = f"geckodriver-v{version}-{platform_name}.tar.gz"
                executable_name = "geckodriver"
            
            url = f"https://github.com/mozilla/geckodriver/releases/download/v{version}/{filename}"
            
            logging.info(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ geckodriver v{version} –¥–ª—è {platform_name}...")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥—Ä–∞–π–≤–µ—Ä–æ–≤
            drivers_dir = os.path.join(os.path.expanduser("~"), ".webdrivers")
            os.makedirs(drivers_dir, exist_ok=True)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            response = requests.get(url, timeout=60)
            response.raise_for_status()
            
            archive_path = os.path.join(drivers_dir, filename)
            with open(archive_path, 'wb') as f:
                f.write(response.content)
            
            logging.info(f"‚úì Geckodriver —Å–∫–∞—á–∞–Ω: {archive_path}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ö–∏–≤
            extract_dir = os.path.join(drivers_dir, f"geckodriver-{version}")
            os.makedirs(extract_dir, exist_ok=True)
            
            if filename.endswith('.zip'):
                with zipfile.ZipFile(archive_path, 'r') as zip_ref:
                    zip_ref.extractall(extract_dir)
            else:
                import tarfile
                with tarfile.open(archive_path, 'r:gz') as tar_ref:
                    tar_ref.extractall(extract_dir)
            
            # –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª
            driver_path = os.path.join(extract_dir, executable_name)
            
            if not os.path.exists(driver_path):
                # –ò—â–µ–º –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
                for root, dirs, files in os.walk(extract_dir):
                    if executable_name in files:
                        driver_path = os.path.join(root, executable_name)
                        break
            
            if os.path.exists(driver_path):
                # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
                if self.system != 'windows':
                    st = os.stat(driver_path)
                    os.chmod(driver_path, st.st_mode | stat.S_IEXEC)
                
                logging.info(f"‚úÖ Geckodriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {driver_path}")
                
                # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
                try:
                    os.remove(archive_path)
                except:
                    pass
                
                return driver_path
            else:
                logging.error(f"‚úó –ù–µ –Ω–∞–π–¥–µ–Ω –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª geckodriver –≤ {extract_dir}")
                return None
                
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è geckodriver: {e}")
            return None
    
    def find_geckodriver(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ geckodriver –≤ —Å–∏—Å—Ç–µ–º–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ PATH
        try:
            if self.system == 'windows':
                result = subprocess.run(['where', 'geckodriver'], capture_output=True, text=True)
            else:
                result = subprocess.run(['which', 'geckodriver'], capture_output=True, text=True)
            
            if result.returncode == 0:
                driver_path = result.stdout.strip()
                if os.path.exists(driver_path):
                    logging.info(f"‚úì –ù–∞–π–¥–µ–Ω geckodriver –≤ PATH: {driver_path}")
                    return driver_path
        except:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        possible_paths = []
        
        if self.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/geckodriver',
                f"{os.environ.get('PREFIX', '')}/bin/geckodriver"
            ]
        elif self.system == 'linux':
            possible_paths = [
                '/usr/bin/geckodriver',
                '/usr/local/bin/geckodriver',
                '/opt/geckodriver/geckodriver',
                '/snap/bin/geckodriver'
            ]
        elif self.system == 'windows':
            possible_paths = [
                r"C:\Program Files\geckodriver\geckodriver.exe",
                r"C:\Program Files (x86)\geckodriver\geckodriver.exe",
                r"C:\geckodriver\geckodriver.exe"
            ]
        elif self.system == 'darwin':
            possible_paths = [
                '/usr/local/bin/geckodriver',
                '/opt/homebrew/bin/geckodriver'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        home_drivers = os.path.join(os.path.expanduser("~"), ".webdrivers")
        if os.path.exists(home_drivers):
            for root, dirs, files in os.walk(home_drivers):
                for file in files:
                    if file.startswith('geckodriver'):
                        possible_paths.append(os.path.join(root, file))
        
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω geckodriver: {path}")
                return path
        
        return None
    
    def get_driver_path(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ geckodriver —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π"""
        if self.driver_path:
            return self.driver_path
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        driver_path = self.find_geckodriver()
        
        if not driver_path:
            logging.info("üì¶ Geckodriver –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
            
            # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å webdriver-manager
            if WDMGeckoDriverManager:
                try:
                    logging.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è webdriver-manager...")
                    driver_path = WDMGeckoDriverManager().install()
                    if driver_path and os.path.exists(driver_path):
                        logging.info(f"‚úÖ Geckodriver —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ webdriver-manager: {driver_path}")
                        self.driver_path = driver_path
                        return driver_path
                except Exception as e:
                    logging.warning(f"‚ö† Webdriver-manager –Ω–µ —É–¥–∞–ª—Å—è: {e}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
            version = self.get_latest_geckodriver_version()
            driver_path = self.download_geckodriver(version)
            
            if not driver_path:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å geckodriver –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        
        self.driver_path = driver_path
        return driver_path

class UserAgentManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è User-Agent –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ - –¢–û–õ–¨–ö–û ANDROID –ò IPAD"""
    
    def __init__(self):
        self.ua_file = "user_agents.json"
        self.user_agents = self.load_user_agents()
        
    def load_user_agents(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö User-Agent'–æ–≤"""
        try:
            if os.path.exists(self.ua_file):
                with open(self.ua_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ User-Agent'–æ–≤: {e}")
        
        return {}
    
    def save_user_agents(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ User-Agent'–æ–≤"""
        try:
            with open(self.ua_file, 'w', encoding='utf-8') as f:
                json.dump(self.user_agents, f, indent=2, ensure_ascii=False)
            logging.debug("üíæ User-Agent'—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è User-Agent'–æ–≤: {e}")
    
    def generate_android_user_agent(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ Android User-Agent"""
        # –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Android
        android_versions = [
            "10", "11", "12", "13", "14", "15"
        ]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        android_devices = [
            "SM-G991B", "SM-G996B", "SM-G998B",  # Samsung Galaxy S21 —Å–µ—Ä–∏—è
            "SM-A515F", "SM-A525F", "SM-A536B",  # Samsung Galaxy A —Å–µ—Ä–∏—è
            "Pixel 6", "Pixel 7", "Pixel 8", "Pixel 9",  # Google Pixel
            "CPH2451", "CPH2455", "CPH2459",  # OnePlus
            "M2101K9G", "M2102K1AC", "M2103K19G",  # Xiaomi
            "RMX3085", "RMX3241", "RMX3506",  # Realme
            "LM-G900", "LM-V600", "LM-K520",  # LG
        ]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Chrome Mobile
        chrome_versions = [
            "119.0.6045.193", "120.0.6099.144", "121.0.6167.165",
            "122.0.6261.105", "123.0.6312.118", "124.0.6367.207",
            "125.0.6422.165", "126.0.6478.122", "127.0.6533.107"
        ]
        
        android_version = random.choice(android_versions)
        device_model = random.choice(android_devices)
        chrome_version = random.choice(chrome_versions)
        webkit_version = f"{random.randint(530, 537)}.{random.randint(1, 36)}"
        
        user_agent = (
            f"Mozilla/5.0 (Linux; Android {android_version}; {device_model}) "
            f"AppleWebKit/{webkit_version} (KHTML, like Gecko) "
            f"Chrome/{chrome_version} Mobile Safari/{webkit_version}"
        )
        
        return user_agent
    
    def generate_ipad_user_agent(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ iPad User-Agent"""
        # –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ iOS –¥–ª—è iPad
        ios_versions = [
            "15_7", "16_1", "16_2", "16_3", "16_4", "16_5", "16_6", "16_7",
            "17_0", "17_1", "17_2", "17_3", "17_4", "17_5", "17_6",
            "18_0", "18_1", "18_2"
        ]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–µ –º–æ–¥–µ–ª–∏ iPad
        ipad_models = [
            "iPad13,1", "iPad13,2",  # iPad Air 4th gen
            "iPad13,4", "iPad13,5", "iPad13,6", "iPad13,7",  # iPad Pro 11" 5th gen
            "iPad13,8", "iPad13,9", "iPad13,10", "iPad13,11",  # iPad Pro 12.9" 5th gen
            "iPad14,1", "iPad14,2",  # iPad mini 6th gen
            "iPad14,3", "iPad14,4",  # iPad Air 5th gen
            "iPad14,5", "iPad14,6",  # iPad Pro 11" 6th gen
            "iPad16,3", "iPad16,4", "iPad16,5", "iPad16,6",  # iPad Pro M4
        ]
        
        # –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Safari
        safari_versions = [
            "604.1", "605.1.15", "612.1.6", "613.2.7", "614.1.25",
            "615.1.26", "616.1.27", "617.2.4", "618.1.15"
        ]
        
        ios_version = random.choice(ios_versions)
        ipad_model = random.choice(ipad_models)
        safari_version = random.choice(safari_versions)
        webkit_version = f"{random.randint(612, 618)}.{random.randint(1, 5)}.{random.randint(1, 30)}"
        
        user_agent = (
            f"Mozilla/5.0 ({ipad_model}; U; CPU OS {ios_version} like Mac OS X) "
            f"AppleWebKit/{webkit_version} (KHTML, like Gecko) "
            f"Version/{safari_version} Mobile/15E148 Safari/{safari_version}"
        )
        
        return user_agent
    
    def get_user_agent(self, username: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ User-Agent –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¢–û–õ–¨–ö–û ANDROID –ò–õ–ò IPAD"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_key = hashlib.md5(username.encode()).hexdigest()
        
        if user_key not in self.user_agents:
            # –†–∞–Ω–¥–æ–º–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –º–µ–∂–¥—É Android –∏ iPad (50/50)
            device_type = random.choice(['android', 'ipad'])
            
            if device_type == 'android':
                mobile_ua = self.generate_android_user_agent()
                device_name = "Android"
            else:
                mobile_ua = self.generate_ipad_user_agent()
                device_name = "iPad"
            
            self.user_agents[user_key] = mobile_ua
            self.save_user_agents()
            logging.info(f"üé≠ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π {device_name} User-Agent –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")
        
        user_agent = self.user_agents[user_key]
        device_type = "Android" if "Android" in user_agent else "iPad"
        logging.info(f"üé≠ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {device_type} User-Agent –¥–ª—è {username}: {user_agent[:50]}...")
        return user_agent

class HumanBehaviorSimulator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è"""
    
    @staticmethod
    def random_sleep(min_seconds: float = 0.5, max_seconds: float = 3.0):
        """–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞"""
        sleep_time = random.uniform(min_seconds, max_seconds)
        logging.debug(f"üí§ –ü–∞—É–∑–∞ {sleep_time:.2f} —Å–µ–∫—É–Ω–¥")
        time.sleep(sleep_time)
    
    @staticmethod
    def generate_bezier_curve(start: Tuple[int, int], end: Tuple[int, int], 
                            control_points: int = 3) -> List[Tuple[int, int]]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –ë–µ–∑—å–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        def bezier_point(t: float, points: List[Tuple[int, int]]) -> Tuple[int, int]:
            n = len(points) - 1
            x = sum(math.comb(n, i) * (1-t)**(n-i) * t**i * points[i][0] for i in range(n+1))
            y = sum(math.comb(n, i) * (1-t)**(n-i) * t**i * points[i][1] for i in range(n+1))
            return int(x), int(y)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
        control_pts = [start]
        for _ in range(control_points):
            x = random.randint(min(start[0], end[0]), max(start[0], end[0]))
            y = random.randint(min(start[1], end[1]), max(start[1], end[1]))
            control_pts.append((x, y))
        control_pts.append(end)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –∫—Ä–∏–≤–æ–π
        curve_points = []
        steps = random.randint(20, 50)
        for i in range(steps + 1):
            t = i / steps
            point = bezier_point(t, control_pts)
            curve_points.append(point)
        
        return curve_points
    
    @staticmethod
    def human_like_typing(element, text: str, driver):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏"""
        element.clear()
        HumanBehaviorSimulator.random_sleep(0.3, 1.0)
        
        # –†–∞—Å–∫–ª–∞–¥–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–µ—á–∞—Ç–æ–∫
        qwerty_neighbors = {
            'q': ['w', 'a'], 'w': ['q', 'e', 's'], 'e': ['w', 'r', 'd'], 'r': ['e', 't', 'f'],
            't': ['r', 'y', 'g'], 'y': ['t', 'u', 'h'], 'u': ['y', 'i', 'j'], 'i': ['u', 'o', 'k'],
            'o': ['i', 'p', 'l'], 'p': ['o', 'l'], 'a': ['q', 's', 'z'], 's': ['w', 'a', 'd', 'x'],
            'd': ['e', 's', 'f', 'c'], 'f': ['r', 'd', 'g', 'v'], 'g': ['t', 'f', 'h', 'b'],
            'h': ['y', 'g', 'j', 'n'], 'j': ['u', 'h', 'k', 'm'], 'k': ['i', 'j', 'l'],
            'l': ['o', 'k', 'p'], 'z': ['a', 's', 'x'], 'x': ['z', 's', 'd', 'c'],
            'c': ['x', 'd', 'f', 'v'], 'v': ['c', 'f', 'g', 'b'], 'b': ['v', 'g', 'h', 'n'],
            'n': ['b', 'h', 'j', 'm'], 'm': ['n', 'j', 'k'],
            '1': ['2', 'q'], '2': ['1', '3', 'q', 'w'], '3': ['2', '4', 'w', 'e'],
            '4': ['3', '5', 'e', 'r'], '5': ['4', '6', 'r', 't'], '6': ['5', '7', 't', 'y'],
            '7': ['6', '8', 'y', 'u'], '8': ['7', '9', 'u', 'i'], '9': ['8', '0', 'i', 'o'],
            '0': ['9', 'o', 'p']
        }
        
        typed_text = ""
        i = 0
        
        while i < len(text):
            char = text[i].lower()
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)
            if char == ' ':
                pause = random.uniform(0.1, 0.4)  # –î–ª–∏–Ω–Ω–µ–µ –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–±–µ–ª–æ–≤
            elif char.isdigit():
                pause = random.uniform(0.08, 0.25)  # –¶–∏—Ñ—Ä—ã –ø–µ—á–∞—Ç–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ
            else:
                pause = random.uniform(0.05, 0.2)
            
            time.sleep(pause)
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ (8% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            if random.random() < 0.08 and char in qwerty_neighbors:
                # –î–µ–ª–∞–µ–º –æ–ø–µ—á–∞—Ç–∫—É
                wrong_char = random.choice(qwerty_neighbors[char])
                element.send_keys(wrong_char)
                typed_text += wrong_char
                logging.debug(f"üî§ –û–ø–µ—á–∞—Ç–∫–∞: '{wrong_char}' –≤–º–µ—Å—Ç–æ '{char}'")
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º (–∫–∞–∫ –±—É–¥—Ç–æ –∑–∞–º–µ—Ç–∏–ª–∏ –æ—à–∏–±–∫—É)
                time.sleep(random.uniform(0.2, 0.8))
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–µ—á–∞—Ç–∫—É
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                time.sleep(random.uniform(0.1, 0.3))
                
                # –ü–µ—á–∞—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
                element.send_keys(text[i])
                typed_text += text[i]
                logging.debug(f"üî§ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: '{text[i]}'")
                
            # –ò–º–∏—Ç–∞—Ü–∏—è –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è (3% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            elif random.random() < 0.03:
                element.send_keys(text[i])
                element.send_keys(text[i])  # –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                typed_text += text[i] + text[i]
                logging.debug(f"üî§ –î–≤–æ–π–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ: '{text[i]}'")
                
                # –ü–∞—É–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                time.sleep(random.uniform(0.3, 0.7))
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                
            # –ò–º–∏—Ç–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ caps lock (—Ç–æ–ª—å–∫–æ –¥–ª—è –±—É–∫–≤, 2% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            elif random.random() < 0.02 and char.isalpha():
                if random.choice([True, False]):
                    wrong_case = text[i].upper() if text[i].islower() else text[i].lower()
                else:
                    wrong_case = text[i].upper()
                
                element.send_keys(wrong_case)
                typed_text += wrong_case
                logging.debug(f"üî§ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä: '{wrong_case}' –≤–º–µ—Å—Ç–æ '{text[i]}'")
                
                # –ü–∞—É–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                time.sleep(random.uniform(0.4, 1.0))
                element.send_keys(Keys.BACKSPACE)
                typed_text = typed_text[:-1]
                time.sleep(random.uniform(0.1, 0.3))
                element.send_keys(text[i])
                typed_text += text[i]
                
            else:
                # –û–±—ã—á–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
                element.send_keys(text[i])
                typed_text += text[i]
            
            # –°–ª—É—á–∞–π–Ω—ã–µ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –ø–∞—É–∑—ã (–∫–∞–∫ –±—É–¥—Ç–æ –¥—É–º–∞–µ–º)
            if random.random() < 0.05:  # 5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
                thinking_pause = random.uniform(0.5, 2.0)
                logging.debug(f"ü§î –ü–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {thinking_pause:.2f}—Å")
                time.sleep(thinking_pause)
            
            i += 1
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞
        HumanBehaviorSimulator.random_sleep(0.5, 1.5)

class SimpleTorManager:
    """–£–ü–†–û–©–ï–ù–ù–´–ô –∫–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Tor —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¢–û–õ–¨–ö–û —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º"""
    
    def __init__(self):
        self.tor_port = None
        self.control_port = None
        self.tor_process = None
        self.system = platform.system().lower()
        self.is_termux = self.detect_termux()
        
        # –ü—É—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        self.tor_data_dir = None
        self.torrc_path = None
        self.stdout_log = None
        self.stderr_log = None
        
    def detect_termux(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤ Termux"""
        return 'com.termux' in os.environ.get('PREFIX', '') or \
               '/data/data/com.termux' in os.environ.get('HOME', '')
    
    def command_exists(self, cmd: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""
        try:
            if self.is_termux or self.system == 'linux':
                result = subprocess.run(['command', '-v', cmd], 
                                      capture_output=True, text=True, shell=True)
                return result.returncode == 0
            elif self.system == 'windows':
                result = subprocess.run(['where', cmd], 
                                      capture_output=True, text=True)
                return result.returncode == 0
            else:  # macOS
                result = subprocess.run(['which', cmd], 
                                      capture_output=True, text=True)
                return result.returncode == 0
        except:
            return False
    
    def install_tor_termux(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –≤ Termux"""
        try:
            logging.info("üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –≤ Termux...")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
            logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...")
            subprocess.run(['pkg', 'update'], check=True, 
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor
            logging.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor...")
            subprocess.run(['pkg', 'install', '-y', 'tor'], check=True,
                         stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            logging.info("‚úì Tor —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Termux")
            return True
            
        except subprocess.CalledProcessError as e:
            logging.error(f"‚úó –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –≤ Termux: {e}")
            return False
        except Exception as e:
            logging.error(f"‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor –≤ Termux: {e}")
            return False
    
    def install_tor(self) -> bool:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor"""
        if self.is_termux:
            return self.install_tor_termux()
        else:
            logging.warning("‚ö† –ê–≤—Ç–æ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ Termux")
            logging.info("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tor –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
            return False
    
    def find_tor_executable(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞ Tor"""
        possible_paths = []
        
        if self.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/tor',
                f"{os.environ.get('PREFIX', '')}/bin/tor"
            ]
        elif self.system == 'linux':
            possible_paths = [
                '/usr/bin/tor',
                '/usr/local/bin/tor',
                '/opt/tor/bin/tor'
            ]
        elif self.system == 'windows':
            username = os.getenv('USERNAME', 'User')
            possible_paths = [
                f"C:\\Users\\{username}\\Desktop\\Tor Browser\\Browser\\TorBrowser\\Tor\\tor.exe",
                r"C:\Program Files\Tor Browser\Browser\TorBrowser\Tor\tor.exe",
                r"C:\Program Files (x86)\Tor Browser\Browser\TorBrowser\Tor\tor.exe",
                r"C:\Tor\tor.exe"
            ]
        elif self.system == 'darwin':
            possible_paths = [
                '/usr/local/bin/tor',
                '/opt/homebrew/bin/tor',
                '/Applications/Tor Browser.app/Contents/MacOS/Tor/tor'
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—É—Ç—å
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                logging.info(f"‚úì –ù–∞–π–¥–µ–Ω Tor: {path}")
                return path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ PATH
        if self.command_exists('tor'):
            logging.info("‚úì Tor –Ω–∞–π–¥–µ–Ω –≤ PATH")
            return 'tor'
        
        return None
    
    def check_tor_port(self) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ Tor"""
        if not self.tor_port:
            return False
            
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(3)
                result = s.connect_ex(('127.0.0.1', self.tor_port))
                is_open = result == 0
                logging.debug(f"üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ Tor {self.tor_port}: {'–æ—Ç–∫—Ä—ã—Ç' if is_open else '–∑–∞–∫—Ä—ã—Ç'}")
                return is_open
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞ Tor: {e}")
            return False

    def test_tor_connection(self) -> bool:
        """–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tor"""
        logging.info("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TOR –°–û–ï–î–ò–ù–ï–ù–ò–Ø")
        
        try:
            import requests
            
            proxies = {
                'http': f'socks5://127.0.0.1:{self.tor_port}',
                'https': f'socks5://127.0.0.1:{self.tor_port}'
            }
            
            response = requests.get('http://httpbin.org/ip', proxies=proxies, timeout=30)
            
            if response.status_code == 200:
                content = response.text.strip()
                logging.info(f"‚úÖ TOR –†–ê–ë–û–¢–ê–ï–¢! IP: {content}")
                return True
            else:
                logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tor: {e}")
            return False

    def start_tor(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Tor —Å –ü–†–û–°–¢–û–ô –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ë–ï–ó –º–æ—Å—Ç–æ–≤"""
        logging.info("üöÄ –ó–ê–ü–£–°–ö TOR –° –ü–†–û–°–¢–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô")
        
        try:
            # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Tor
            kill_existing_tor_processes()
            time.sleep(3)
            
            # –ü–æ–∏—Å–∫ Tor –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            tor_executable = self.find_tor_executable()
            if not tor_executable:
                logging.info("‚ö† Tor –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                if not self.install_tor():
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Tor")
                    return False
                tor_executable = self.find_tor_executable()
                if not tor_executable:
                    logging.error("‚ùå Tor –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
                    return False
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
            free_ports = find_free_port_range(9050, 2)
            if len(free_ports) < 2:
                logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ 2 —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–∞")
                return False
            
            self.tor_port = free_ports[0]      # SOCKS –ø–æ—Ä—Ç
            self.control_port = free_ports[1]  # Control –ø–æ—Ä—Ç
            
            logging.info(f"üîå –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã: SOCKS={self.tor_port}, Control={self.control_port}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Tor
            import tempfile
            import getpass
            
            try:
                current_user = getpass.getuser()
            except:
                current_user = "user"
            
            temp_dir = tempfile.gettempdir()
            tor_data_dir = os.path.join(temp_dir, f"tor_data_{current_user}_{os.getpid()}")
            
            # –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(tor_data_dir):
                shutil.rmtree(tor_data_dir, ignore_errors=True)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(tor_data_dir, mode=0o700, exist_ok=True)
            
            logging.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö Tor: {tor_data_dir}")
            
            # –ü–†–û–°–¢–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor –ë–ï–ó –º–æ—Å—Ç–æ–≤
            tor_config = f"""SocksPort {self.tor_port}
ControlPort {self.control_port}
DataDirectory {tor_data_dir}
Log notice stdout
"""
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            torrc_path = os.path.join(temp_dir, f"torrc_temp_{os.getpid()}")
            with open(torrc_path, "w") as f:
                f.write(tor_config)
            
            logging.debug(f"üìÑ –ö–æ–Ω—Ñ–∏–≥ Tor —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {torrc_path}")
            logging.info("üìÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tor (–ü–†–û–°–¢–ê–Ø, –ë–ï–ó –ú–û–°–¢–û–í):")
            logging.info(tor_config)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Tor
            cmd = [tor_executable, "-f", torrc_path]
            
            logging.info(f"üöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {' '.join(cmd)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ª–æ–≥–æ–≤
            stdout_log = os.path.join(temp_dir, f"tor_stdout_{os.getpid()}.log")
            stderr_log = os.path.join(temp_dir, f"tor_stderr_{os.getpid()}.log")
            
            with open(stdout_log, "w") as stdout_file, \
                 open(stderr_log, "w") as stderr_file:
                
                if self.system == 'windows':
                    self.tor_process = subprocess.Popen(
                        cmd,
                        stdout=stdout_file,
                        stderr=stderr_file,
                        creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
                    )
                else:
                    self.tor_process = subprocess.Popen(
                        cmd,
                        stdout=stdout_file,
                        stderr=stderr_file,
                        preexec_fn=os.setsid
                    )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
            self.tor_data_dir = tor_data_dir
            self.torrc_path = torrc_path
            self.stdout_log = stdout_log
            self.stderr_log = stderr_log
            
            logging.info(f"üîÑ PID –ø—Ä–æ—Ü–µ—Å—Å–∞ Tor: {self.tor_process.pid}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Tor - –£–í–ï–õ–ò–ß–ï–ù –¢–ê–ô–ú–ê–£–¢ –î–û 20 –ú–ò–ù–£–¢
            logging.info("‚è≥ –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ü–£–°–ö–ê TOR (–¥–æ 20 –º–∏–Ω—É—Ç)...")
            port_ready = False
            bootstrap_complete = False
            
            for i in range(600):  # 600 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 20 –º–∏–Ω—É—Ç (–±—ã–ª–æ 60)
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
                if self.tor_process.poll() is not None:
                    logging.error(f"‚ùå –ü—Ä–æ—Ü–µ—Å—Å Tor –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {self.tor_process.poll()}")
                    self.log_tor_errors()
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
                if not port_ready and self.check_tor_port():
                    logging.info("‚úÖ Tor –ø–æ—Ä—Ç –≥–æ—Ç–æ–≤")
                    port_ready = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç bootstrap
                if port_ready and not bootstrap_complete:
                    try:
                        if os.path.exists(stdout_log):
                            with open(stdout_log, "r") as f:
                                log_content = f.read()
                                if "Bootstrapped 100%" in log_content:
                                    logging.info("‚úÖ Tor bootstrap –∑–∞–≤–µ—Ä—à–µ–Ω –Ω–∞ 100%")
                                    bootstrap_complete = True
                                    break
                                elif "Bootstrapped" in log_content:
                                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                                    import re
                                    matches = re.findall(r'Bootstrapped (\d+)%', log_content)
                                    if matches:
                                        last_percent = matches[-1]
                                        logging.info(f"üîÑ Tor bootstrap: {last_percent}%")
                    except:
                        pass
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ (–±—ã–ª–æ 20)
                if i % 30 == 0:  # –ö–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
                    elapsed_minutes = (i * 2) / 60
                    logging.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ Tor... ({elapsed_minutes:.1f}/20 –º–∏–Ω—É—Ç)")
            
            if not port_ready:
                logging.error("‚ùå Tor –ø–æ—Ä—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
                self.log_tor_errors()
                return False
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            logging.info("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ï–î–ò–ù–ï–ù–ò–Ø...")
            if self.test_tor_connection():
                logging.info("‚úÖ TOR –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")
                return True
            else:
                logging.error("‚ùå Tor –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                self.log_tor_errors()
                return False
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Tor: {e}")
            return False

    def log_tor_errors(self):
        """–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫ Tor –∏–∑ –ª–æ–≥–æ–≤"""
        logging.info("üìã –ê–ù–ê–õ–ò–ó –õ–û–ì–û–í TOR...")
        
        try:
            stderr_log = getattr(self, 'stderr_log', './tor_stderr.log')
            stdout_log = getattr(self, 'stdout_log', './tor_stdout.log')
            
            if stderr_log and os.path.exists(stderr_log):
                with open(stderr_log, "r") as f:
                    stderr_content = f.read().strip()
                    if stderr_content:
                        logging.error(f"üö® –û–®–ò–ë–ö–ò TOR:\n{stderr_content}")
                    else:
                        logging.info("üìù –û—à–∏–±–∫–∏ Tor –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            
            if stdout_log and os.path.exists(stdout_log):
                with open(stdout_log, "r") as f:
                    stdout_content = f.read().strip()
                    if stdout_content:
                        logging.info(f"üìÑ –í–´–í–û–î TOR:\n{stdout_content}")
                        
                        # –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        if "Bootstrapped 100%" in stdout_content:
                            logging.info("‚úÖ Tor —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –Ω–∞ 100%")
                        elif "Bootstrapped" in stdout_content:
                            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
                            import re
                            matches = re.findall(r'Bootstrapped (\d+)%', stdout_content)
                            if matches:
                                last_percent = matches[-1]
                                logging.warning(f"‚ö† Tor –∑–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ {last_percent}%")
                        
                        if "Opening Socks listener" in stdout_content:
                            logging.info("‚úÖ SOCKS –ø—Ä–æ–∫—Å–∏ –∑–∞–ø—É—â–µ–Ω")
                    else:
                        logging.warning("üìù –í—ã–≤–æ–¥ Tor –ø—É—Å—Ç")
                        
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ Tor: {e}")
    
    def stop_tor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor"""
        try:
            if self.tor_process:
                logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Tor...")
                
                if self.system == 'windows':
                    self.tor_process.terminate()
                else:
                    try:
                        os.killpg(os.getpgid(self.tor_process.pid), 15)  # SIGTERM
                    except:
                        self.tor_process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    self.tor_process.wait(timeout=5)
                    logging.info("‚úì Tor –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                except subprocess.TimeoutExpired:
                    logging.warning("‚ö† –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ Tor...")
                    if self.system == 'windows':
                        self.tor_process.kill()
                    else:
                        try:
                            os.killpg(os.getpgid(self.tor_process.pid), 9)  # SIGKILL
                        except:
                            self.tor_process.kill()
                    
                    self.tor_process.wait(timeout=3)
                    logging.info("‚úì Tor –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
                self.tor_process = None
                
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files = [
                getattr(self, 'torrc_path', None),
                getattr(self, 'stdout_log', None),
                getattr(self, 'stderr_log', None)
            ]
            
            for temp_file in temp_files:
                try:
                    if temp_file and os.path.exists(temp_file):
                        os.remove(temp_file)
                        logging.debug(f"üóë –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {temp_file}")
                except Exception as e:
                    logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {temp_file}: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            tor_data_dir = getattr(self, 'tor_data_dir', None)
            try:
                if tor_data_dir and os.path.exists(tor_data_dir):
                    shutil.rmtree(tor_data_dir, ignore_errors=True)
                    logging.debug(f"üóë –£–¥–∞–ª–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {tor_data_dir}")
            except Exception as e:
                logging.debug(f"‚ö† –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {tor_data_dir}: {e}")
                    
        except Exception as e:
            logging.debug(f"‚ö† –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Tor: {e}")

class AvisoAutomation:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Aviso"""
    
    def __init__(self):
        self.setup_logging()
        self.driver = None
        self.tor_manager = SimpleTorManager()
        self.ua_manager = UserAgentManager()
        self.gecko_manager = GeckoDriverManager()
        self.cookies_file = "aviso_cookies.pkl"
        self.original_ip = None
        self.use_tor = True
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.username = "Aleksey83692"
        self.password = "123456"
        self.base_url = "https://aviso.bz"
        
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ Aviso Bot")
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_filename = f"aviso_bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        log_format = "%(asctime)s [%(levelname)s] %(message)s"
        
        for handler in logging.root.handlers[:]:
            logging.root.removeHandler(handler)
        
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler(log_filename, encoding='utf-8')
            ]
        )

    def get_current_ip_without_proxy(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        test_services = [
            'https://api.ipify.org?format=text',
            'https://icanhazip.com/',
            'https://checkip.amazonaws.com/'
        ]
        
        for service in test_services:
            try:
                response = requests.get(service, timeout=10)
                response.raise_for_status()
                external_ip = response.text.strip()
                
                import re
                if re.match(r'^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$', external_ip):
                    return external_ip
            except:
                continue
        
        return None

    def verify_ip_change_via_2ip(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ–Ω—ã IP —á–µ—Ä–µ–∑ 2ip.ru"""
        try:
            self.driver.get("https://2ip.ru")
            time.sleep(5)
            
            ip_element = self.driver.find_element(By.CSS_SELECTOR, "div.ip span")
            current_ip = ip_element.text.strip()
            
            logging.info(f"üîç IP: {current_ip}")
            
            if self.original_ip and current_ip == self.original_ip:
                logging.error("‚ùå IP –Ω–µ —Å–º–µ–Ω–∏–ª—Å—è! Tor –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return False
            else:
                logging.info("‚úÖ IP —Å–º–µ–Ω–∏–ª—Å—è")
                return True
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ IP: {e}")
            return False

    def find_firefox_binary(self) -> Optional[str]:
        """–ü–æ–∏—Å–∫ Firefox"""
        possible_paths = []
        
        if self.tor_manager.is_termux:
            possible_paths = [
                '/data/data/com.termux/files/usr/bin/firefox',
                f"{os.environ.get('PREFIX', '')}/bin/firefox"
            ]
        elif self.tor_manager.system == 'linux':
            possible_paths = [
                '/usr/bin/firefox',
                '/usr/local/bin/firefox',
                '/opt/firefox/firefox',
                '/snap/bin/firefox'
            ]
        elif self.tor_manager.system == 'windows':
            possible_paths = [
                r"C:\Program Files\Mozilla Firefox\firefox.exe",
                r"C:\Program Files (x86)\Mozilla Firefox\firefox.exe"
            ]
        elif self.tor_manager.system == 'darwin':
            possible_paths = [
                '/Applications/Firefox.app/Contents/MacOS/firefox'
            ]
        
        for path in possible_paths:
            if os.path.exists(path) and os.access(path, os.X_OK):
                return path
        
        if self.tor_manager.command_exists('firefox'):
            return 'firefox'
        
        return None

    def setup_driver(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firefox"""
        logging.info("üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...")
        
        self.original_ip = self.get_current_ip_without_proxy()
        
        if self.tor_manager.start_tor():
            logging.info("‚úÖ Tor –∑–∞–ø—É—â–µ–Ω")
            self.use_tor = True
        else:
            logging.warning("‚ö† Tor –Ω–µ –∑–∞–ø—É—â–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
            self.use_tor = False
        
        try:
            user_agent = self.ua_manager.get_user_agent(self.username)
            geckodriver_path = self.gecko_manager.get_driver_path()
            
            firefox_options = Options()
            
            if self.use_tor:
                firefox_options.set_preference("network.proxy.type", 1)
                firefox_options.set_preference("network.proxy.socks", "127.0.0.1")
                firefox_options.set_preference("network.proxy.socks_port", self.tor_manager.tor_port)
                firefox_options.set_preference("network.proxy.socks_version", 5)
                firefox_options.set_preference("network.proxy.socks_remote_dns", True)
                firefox_options.set_preference("network.proxy.http", "")
                firefox_options.set_preference("network.proxy.http_port", 0)
                firefox_options.set_preference("network.proxy.ssl", "")
                firefox_options.set_preference("network.proxy.ssl_port", 0)
            else:
                firefox_options.set_preference("network.proxy.type", 0)
            
            firefox_options.set_preference("general.useragent.override", user_agent)
            firefox_options.set_preference("dom.webdriver.enabled", False)
            firefox_options.set_preference("useAutomationExtension", False)
            firefox_options.set_preference("network.http.use-cache", False)
            
            if "Android" in user_agent:
                firefox_options.set_preference("layout.css.devPixelRatio", "2.0")
                firefox_options.set_preference("dom.w3c_touch_events.enabled", 1)
            else:
                firefox_options.set_preference("layout.css.devPixelRatio", "2.0")
                firefox_options.set_preference("dom.w3c_touch_events.enabled", 1)
                firefox_options.set_preference("general.appname.override", "Netscape")
                firefox_options.set_preference("general.appversion.override", "5.0 (Mobile; rv:68.0)")
            
            firefox_options.set_preference("media.peerconnection.enabled", False)
            firefox_options.set_preference("media.navigator.enabled", False)
            firefox_options.set_preference("privacy.resistFingerprinting", False)
            firefox_options.set_preference("privacy.trackingprotection.enabled", True)
            firefox_options.set_preference("geo.enabled", False)
            firefox_options.set_preference("browser.safebrowsing.downloads.remote.enabled", False)
            firefox_options.set_preference("app.update.enabled", False)
            firefox_options.set_preference("toolkit.telemetry.enabled", False)
            firefox_options.set_preference("datareporting.healthreport.uploadEnabled", False)
            
            if self.tor_manager.is_termux:
                firefox_options.add_argument("--no-sandbox")
                firefox_options.add_argument("--disable-dev-shm-usage")
            
            firefox_binary = self.find_firefox_binary()
            if firefox_binary and firefox_binary != 'firefox':
                firefox_options.binary_location = firefox_binary
            
            service = Service(executable_path=geckodriver_path)
            self.driver = webdriver.Firefox(options=firefox_options, service=service)
            
            self.driver.set_page_load_timeout(120)
            self.driver.implicitly_wait(20)
            
            if "Android" in user_agent:
                mobile_sizes = [(360, 640), (375, 667), (414, 896), (393, 851)]
                width, height = random.choice(mobile_sizes)
            else:
                ipad_sizes = [(768, 1024), (834, 1112), (1024, 1366)]
                width, height = random.choice(ipad_sizes)
            
            self.driver.set_window_size(width, height)
            logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            
            if self.use_tor:
                return self.verify_ip_change_via_2ip()
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return False

    def save_cookies(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ cookies"""
        try:
            cookies = self.driver.get_cookies()
            with open(self.cookies_file, 'wb') as f:
                pickle.dump(cookies, f)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
    
    def load_cookies(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ cookies"""
        try:
            if os.path.exists(self.cookies_file):
                self.driver.get(self.base_url)
                time.sleep(3)
                
                with open(self.cookies_file, 'rb') as f:
                    cookies = pickle.load(f)
                
                for cookie in cookies:
                    try:
                        self.driver.add_cookie(cookie)
                    except:
                        pass
                
                return True
        except:
            pass
        
        return False
    
    def check_authorization(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            login_forms = self.driver.find_elements(By.NAME, "username")
            return len(login_forms) == 0
        except:
            return False
    
    def login(self) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        logging.info("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
        
        try:
            self.driver.get(f"{self.base_url}/login")
            time.sleep(5)
            
            wait = WebDriverWait(self.driver, 30)
            
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
            username_field.click()
            HumanBehaviorSimulator.human_like_typing(username_field, self.username, self.driver)
            
            password_field = self.driver.find_element(By.NAME, "password")
            password_field.click()
            HumanBehaviorSimulator.human_like_typing(password_field, self.password, self.driver)
            
            login_button = self.driver.find_element(By.ID, "button-login")
            time.sleep(2)
            login_button.click()
            
            time.sleep(8)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA
            current_url = self.driver.current_url
            if "/2fa" in current_url:
                logging.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è 2FA –∫–æ–¥")
                
                try:
                    code_field = wait.until(EC.presence_of_element_located((By.NAME, "code")))
                    
                    verification_code = input("–í–≤–µ–¥–∏—Ç–µ 2FA –∫–æ–¥: ").strip()
                    
                    if verification_code and verification_code.isdigit():
                        code_field.click()
                        HumanBehaviorSimulator.human_like_typing(code_field, verification_code, self.driver)
                        
                        confirm_buttons = self.driver.find_elements(By.CSS_SELECTOR, "button.button_theme_blue")
                        if confirm_buttons:
                            confirm_buttons[0].click()
                        
                        time.sleep(8)
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ 2FA: {e}")
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            login_forms = self.driver.find_elements(By.NAME, "username")
            if not login_forms:
                logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                self.save_cookies()
                return True
            else:
                logging.error("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def random_mouse_movement(self):
        """–î–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏"""
        try:
            viewport_size = self.driver.get_window_size()
            max_width = max(100, viewport_size['width'] - 100)
            max_height = max(100, viewport_size['height'] - 100)
            
            current_pos = (random.randint(50, max_width), random.randint(50, max_height))
            new_pos = (random.randint(50, max_width), random.randint(50, max_height))
            
            curve_points = HumanBehaviorSimulator.generate_bezier_curve(current_pos, new_pos)
            actions = ActionChains(self.driver)
            
            for i, point in enumerate(curve_points):
                if i == 0:
                    continue
                prev_point = curve_points[i-1]
                offset_x = max(-50, min(50, int(point[0] - prev_point[0])))
                offset_y = max(-50, min(50, int(point[1] - prev_point[1])))
                actions.move_by_offset(offset_x, offset_y)
                time.sleep(random.uniform(0.01, 0.05))
            
            actions.perform()
        except:
            pass
    
    def random_scroll(self):
        """–ü—Ä–æ–∫—Ä—É—Ç–∫–∞"""
        try:
            scroll_direction = random.choice(['up', 'down'])
            scroll_amount = random.randint(100, 500)
            
            if scroll_direction == 'down':
                self.driver.execute_script(f"window.scrollBy(0, {scroll_amount});")
            else:
                self.driver.execute_script(f"window.scrollBy(0, -{scroll_amount});")
            
            time.sleep(random.uniform(0.5, 2.0))
        except:
            pass
    
    def get_youtube_tasks(self) -> List[Dict]:
        """–≠–§–§–ï–ö–¢–ò–í–ù–´–ô –ø–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π - JavaScript –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º"""
        logging.info("üìã –ü–æ–∏—Å–∫ –∑–∞–¥–∞–Ω–∏–π...")
        
        try:
            self.driver.get(f"{self.base_url}/tasks-youtube")
            time.sleep(5)
            
            # –≠–§–§–ï–ö–¢–ò–í–ù–û: JavaScript –ø–∞—Ä—Å–∏–Ω–≥ –í–°–ï–• –∑–∞–¥–∞–Ω–∏–π –∑–∞ 1 –∑–∞–ø—Ä–æ—Å
            tasks_data = self.driver.execute_script("""
                var tasks = [];
                var rows = document.querySelectorAll("tr[class^='ads_']");
                
                for (var i = 0; i < rows.length; i++) {
                    try {
                        var row = rows[i];
                        var className = row.className;
                        var taskIdMatch = className.match(/ads_(\d+)/);
                        
                        if (taskIdMatch) {
                            var taskId = taskIdMatch[1];
                            var startButton = row.querySelector("span[id='link_ads_start_" + taskId + "']");
                            
                            if (startButton) {
                                var onclick = startButton.getAttribute('onclick');
                                var timeMatch = onclick ? onclick.match(/start_youtube_new\(\d+,\s*'(\d+)'\)/) : null;
                                var watchTime = timeMatch ? parseInt(timeMatch[1]) : 10;
                                var videoUrl = startButton.getAttribute('title') || 'unknown';
                                
                                tasks.push({
                                    id: taskId,
                                    watch_time: watchTime,
                                    video_url: videoUrl,
                                    button_selector: "span[id='link_ads_start_" + taskId + "']",
                                    row_class: className
                                });
                            }
                        }
                    } catch (e) {
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    }
                }
                
                return tasks;
            """)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            tasks = []
            for task_data in tasks_data:
                try:
                    task_row = self.driver.find_element(By.CSS_SELECTOR, f"tr.{task_data['row_class']}")
                    start_button = self.driver.find_element(By.CSS_SELECTOR, task_data['button_selector'])
                    
                    task_info = {
                        'id': task_data['id'],
                        'element': start_button,
                        'watch_time': task_data['watch_time'],
                        'video_url': task_data['video_url'],
                        'row': task_row
                    }
                    
                    tasks.append(task_info)
                except:
                    continue
            
            logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
            return tasks
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π: {e}")
            return []
    
    def handle_youtube_ads(self) -> bool:
        """–≠–§–§–ï–ö–¢–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–ª–∞–º—ã - JavaScript –≤–º–µ—Å—Ç–æ –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        logging.info("üì∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–ª–∞–º—ã...")
        
        try:
            time.sleep(3)
            
            # –≠–§–§–ï–ö–¢–ò–í–ù–û: JavaScript –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–ª–∞–º—ã –∑–∞ 1 –∑–∞–ø—Ä–æ—Å
            ad_status = self.driver.execute_script("""
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∫–ª–∞–º—ã
                var adBadges = document.querySelectorAll('span.ytp-ad-badge--clean-player, [id*="ad-badge"], .ytp-ad-badge');
                var hasAd = false;
                
                for (var i = 0; i < adBadges.length; i++) {
                    if (adBadges[i].offsetParent !== null) { // –≠–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º—ã–π
                        hasAd = true;
                        break;
                    }
                }
                
                if (!hasAd) {
                    return {status: 'no_ad'};
                }
                
                // –ï—Å—Ç—å —Ä–µ–∫–ª–∞–º–∞ - –∏—â–µ–º –∫–Ω–æ–ø–∫—É skip
                var skipButtons = document.querySelectorAll('.ytp-ad-skip-button, .ytp-ad-skip-button-modern, [class*="skip"]');
                for (var i = 0; i < skipButtons.length; i++) {
                    if (skipButtons[i].offsetParent !== null && !skipButtons[i].disabled) {
                        return {status: 'skip_available', element: skipButtons[i]};
                    }
                }
                
                return {status: 'wait_ad'};
            """)
            
            if ad_status['status'] == 'no_ad':
                return True
            
            if ad_status['status'] == 'skip_available':
                # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É skip —á–µ—Ä–µ–∑ JavaScript
                self.driver.execute_script("arguments[0].click();", ad_status['element'])
                logging.info("‚è≠ –†–µ–∫–ª–∞–º–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                time.sleep(2)
                return True
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –≠–§–§–ï–ö–¢–ò–í–ù–û
            logging.info("üì∫ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã...")
            
            for attempt in range(120):  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
                # –≠–§–§–ï–ö–¢–ò–í–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ JavaScript
                ad_finished = self.driver.execute_script("""
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—á–µ–∑–ª–∞ –ª–∏ —Ä–µ–∫–ª–∞–º–∞
                    var adBadges = document.querySelectorAll('span.ytp-ad-badge--clean-player, [id*="ad-badge"], .ytp-ad-badge');
                    for (var i = 0; i < adBadges.length; i++) {
                        if (adBadges[i].offsetParent !== null) {
                            return false; // –†–µ–∫–ª–∞–º–∞ –µ—â–µ –µ—Å—Ç—å
                        }
                    }
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∞—Å—å –ª–∏ –∫–Ω–æ–ø–∫–∞ skip
                    var skipButtons = document.querySelectorAll('.ytp-ad-skip-button, .ytp-ad-skip-button-modern, [class*="skip"]');
                    for (var i = 0; i < skipButtons.length; i++) {
                        if (skipButtons[i].offsetParent !== null && !skipButtons[i].disabled) {
                            skipButtons[i].click();
                            return true;
                        }
                    }
                    
                    return true; // –†–µ–∫–ª–∞–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
                """)
                
                if ad_finished:
                    logging.info("‚úÖ –†–µ–∫–ª–∞–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å")
                    return True
                
                time.sleep(1)
            
            logging.info("‚úÖ –†–µ–∫–ª–∞–º–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∫–ª–∞–º—ã: {e}")
            return True

    def click_center_screen(self):
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥ - —Ä–∞–±–æ—Ç–∞ —Å IFRAME –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–∫–∏"""
        try:
            logging.info("üñ± –ó–∞–ø—É—Å–∫ –≤–∏–¥–µ–æ...")
            
            # 1. –°–ù–ê–ß–ê–õ–ê –ü–†–û–ë–£–ï–ú –ü–ï–†–ï–ö–õ–Æ–ß–ò–¢–¨–°–Ø –ù–ê IFRAME
            iframe_switched = False
            try:
                # –ò—â–µ–º –≤—Å–µ iframe'—ã
                iframes = self.driver.find_elements(By.TAG_NAME, "iframe")
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ iframe'–æ–≤: {len(iframes)}")
                
                for i, iframe in enumerate(iframes):
                    try:
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ iframe
                        self.driver.switch_to.frame(iframe)
                        iframe_switched = True
                        logging.info(f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ iframe {i}")
                        
                        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–¥–µ–æ –≤–Ω—É—Ç—Ä–∏ iframe
                        success = self.driver.execute_script("""
                            var attempts = [];
                            
                            // –ò—â–µ–º –≤–∏–¥–µ–æ –≤–Ω—É—Ç—Ä–∏ iframe
                            var videos = document.getElementsByTagName('video');
                            attempts.push('Videos found in iframe: ' + videos.length);
                            
                            for (var i = 0; i < videos.length; i++) {
                                try {
                                    var video = videos[i];
                                    
                                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                                    video.muted = false;
                                    video.volume = 0.1;
                                    video.controls = true;
                                    video.autoplay = true;
                                    
                                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
                                    var playPromise = video.play();
                                    if (playPromise && typeof playPromise.then === 'function') {
                                        playPromise.then(function() {
                                            attempts.push('IFRAME Video ' + i + ' STARTED!');
                                        }).catch(function(error) {
                                            // –ü—Ä–æ–±—É–µ–º —Å muted
                                            video.muted = true;
                                            video.play().then(function() {
                                                attempts.push('IFRAME Video ' + i + ' started muted');
                                                setTimeout(function() { video.muted = false; }, 1000);
                                            });
                                        });
                                    }
                                    
                                    // –ö–ª–∏–∫ –ø–æ –≤–∏–¥–µ–æ –≤ iframe
                                    var rect = video.getBoundingClientRect();
                                    if (rect.width > 0 && rect.height > 0) {
                                        var clickEvent = new MouseEvent('click', {
                                            view: window,
                                            bubbles: true,
                                            cancelable: true,
                                            clientX: rect.left + rect.width / 2,
                                            clientY: rect.top + rect.height / 2
                                        });
                                        video.dispatchEvent(clickEvent);
                                        attempts.push('Clicked iframe video ' + i);
                                    }
                                    
                                } catch (e) {
                                    attempts.push('IFRAME Video ' + i + ' error: ' + e.message);
                                }
                            }
                            
                            // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ iframe
                            var playButtons = document.querySelectorAll(
                                '.ytp-large-play-button, .ytp-play-button, [aria-label*="Play"], [aria-label*="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏"]'
                            );
                            
                            for (var i = 0; i < playButtons.length; i++) {
                                try {
                                    var button = playButtons[i];
                                    if (button.offsetParent !== null) {
                                        button.click();
                                        attempts.push('IFRAME Play button clicked: ' + i);
                                    }
                                } catch (e) {
                                    attempts.push('IFRAME Button error: ' + e.message);
                                }
                            }
                            
                            return attempts;
                        """)
                        
                        logging.info(f"üé¨ IFRAME –ø–æ–ø—ã—Ç–∫–∏: {success}")
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
                        self.driver.switch_to.default_content()
                        break
                        
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç iframe, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
                        self.driver.switch_to.default_content()
                        continue
                        
            except Exception as e:
                logging.info(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å iframe: {e}")
                if iframe_switched:
                    self.driver.switch_to.default_content()
            
            # 2. –§–ò–ó–ò–ß–ï–°–ö–ò–ï –ö–õ–ò–ö–ò SELENIUM - –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï
            try:
                logging.info("üñ± –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∫–ª–∏–∫–∏...")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
                viewport_size = self.driver.get_window_size()
                
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –∫–ª–∏–∫–∞ (–≤–∫–ª—é—á–∞—è –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è iframe)
                click_points = [
                    (382, 456),  # –¢–æ—á–∫–∞ –≥–¥–µ –±—ã–ª iframe –ø–æ –ª–æ–≥–∞–º
                    (viewport_size['width'] // 2, viewport_size['height'] // 2),  # –¶–µ–Ω—Ç—Ä
                    (viewport_size['width'] // 2, viewport_size['height'] // 3),  # –í–µ—Ä—Ö —Ü–µ–Ω—Ç—Ä
                    (viewport_size['width'] // 2, viewport_size['height'] * 2 // 3),  # –ù–∏–∑ —Ü–µ–Ω—Ç—Ä
                    (viewport_size['width'] // 3, viewport_size['height'] // 2),  # –õ–µ–≤–æ —Ü–µ–Ω—Ç—Ä
                    (viewport_size['width'] * 2 // 3, viewport_size['height'] // 2),  # –ü—Ä–∞–≤–æ —Ü–µ–Ω—Ç—Ä
                ]
                
                for i, (x, y) in enumerate(click_points):
                    try:
                        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —ç–∫—Ä–∞–Ω–∞
                        x = max(10, min(viewport_size['width'] - 10, x))
                        y = max(10, min(viewport_size['height'] - 10, y))
                        
                        logging.info(f"üñ± –ö–ª–∏–∫ {i+1}: ({x}, {y})")
                        
                        # ActionChains –∫–ª–∏–∫
                        actions = ActionChains(self.driver)
                        actions.move_by_offset(x - viewport_size['width']//2, y - viewport_size['height']//2)
                        actions.click()
                        actions.perform()
                        time.sleep(0.3)
                        
                        # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
                        actions = ActionChains(self.driver)
                        actions.move_by_offset(-(x - viewport_size['width']//2), -(y - viewport_size['height']//2))
                        actions.perform()
                        
                        # JavaScript –∫–ª–∏–∫ –≤ —Ç—É –∂–µ —Ç–æ—á–∫—É
                        self.driver.execute_script(f"""
                            var element = document.elementFromPoint({x}, {y});
                            if (element) {{
                                var clickEvent = new MouseEvent('click', {{
                                    view: window,
                                    bubbles: true,
                                    cancelable: true,
                                    clientX: {x},
                                    clientY: {y}
                                }});
                                element.dispatchEvent(clickEvent);
                                element.click();
                            }}
                        """)
                        
                    except Exception as e:
                        logging.info(f"‚ö† –û—à–∏–±–∫–∞ –∫–ª–∏–∫–∞ {i+1}: {e}")
                        
            except Exception as e:
                logging.info(f"‚ö† –û—à–∏–±–∫–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –∫–ª–∏–∫–æ–≤: {e}")
            
            # 3. –ö–õ–ê–í–ò–ê–¢–£–†–ù–´–ï –ö–û–ú–ê–ù–î–´
            try:
                from selenium.webdriver.common.keys import Keys
                body = self.driver.find_element(By.TAG_NAME, "body")
                
                # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ
                keys_to_try = [Keys.SPACE, Keys.ENTER, 'k', 'p', Keys.ARROW_RIGHT]
                for key in keys_to_try:
                    try:
                        body.send_keys(key)
                        time.sleep(0.2)
                        logging.info(f"‚å® –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {key}")
                    except:
                        pass
            except:
                pass
            
            # 4. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –ú–ï–¢–û–î –î–õ–Ø YOUTUBE –í IFRAME
            time.sleep(1)
            self.driver.execute_script("""
                // –ü—Ä–æ–±—É–µ–º –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ YouTube —á–µ—Ä–µ–∑ postMessage
                var iframes = document.getElementsByTagName('iframe');
                for (var i = 0; i < iframes.length; i++) {
                    try {
                        var iframe = iframes[i];
                        
                        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
                        iframe.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
                        iframe.contentWindow.postMessage('{"event":"command","func":"unMute","args":""}', '*');
                        
                        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ iframe
                        var rect = iframe.getBoundingClientRect();
                        var x = rect.left + rect.width / 2;
                        var y = rect.top + rect.height / 2;
                        
                        var clickEvent = new MouseEvent('click', {
                            view: window,
                            bubbles: true,
                            cancelable: true,
                            clientX: x,
                            clientY: y
                        });
                        
                        iframe.dispatchEvent(clickEvent);
                        
                        console.log('Sent postMessage and click to iframe', i);
                        
                    } catch (e) {
                        console.log('iframe', i, 'error:', e);
                    }
                }
                
                // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
                document.dispatchEvent(new Event('click'));
                window.focus();
                document.body.focus();
            """)
            
            # 5. –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ JavaScript –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            status = self.driver.execute_script("""
                var result = {
                    videos_found: 0,
                    videos_playing: 0,
                    iframes_found: 0,
                    audio_context: false
                };
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ
                var videos = document.getElementsByTagName('video');
                result.videos_found = videos.length;
                
                for (var i = 0; i < videos.length; i++) {
                    if (!videos[i].paused && videos[i].currentTime > 0) {
                        result.videos_playing++;
                    }
                }
                
                // –°—á–∏—Ç–∞–µ–º iframe'—ã
                result.iframes_found = document.getElementsByTagName('iframe').length;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º AudioContext (–ø—Ä–∏–∑–Ω–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞—É–¥–∏–æ)
                try {
                    if (window.AudioContext || window.webkitAudioContext) {
                        result.audio_context = true;
                    }
                } catch (e) {}
                
                return result;
            """)
            
            logging.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
            
            if status['videos_playing'] > 0:
                logging.info(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ! –ò–≥—Ä–∞—é—â–∏—Ö: {status['videos_playing']}")
            else:
                logging.warning("‚ö† –í–∏–¥–µ–æ –≤ iframe –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
                
                # –ü–û–°–õ–ï–î–ù–Ø–Ø –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ü–û–ü–´–¢–ö–ê - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏ –ø–æ iframe
                self.driver.execute_script("""
                    setTimeout(function() {
                        var iframes = document.getElementsByTagName('iframe');
                        for (var i = 0; i < iframes.length; i++) {
                            var iframe = iframes[i];
                            var rect = iframe.getBoundingClientRect();
                            
                            // –ú–Ω–æ–≥–æ –∫–ª–∏–∫–æ–≤ –ø–æ iframe
                            for (var j = 0; j < 5; j++) {
                                setTimeout(function() {
                                    var x = rect.left + rect.width / 2;
                                    var y = rect.top + rect.height / 2;
                                    
                                    var clickEvent = new MouseEvent('click', {
                                        view: window,
                                        bubbles: true,
                                        cancelable: true,
                                        clientX: x,
                                        clientY: y
                                    });
                                    
                                    iframe.dispatchEvent(clickEvent);
                                    document.elementFromPoint(x, y).click();
                                    
                                }, j * 100);
                            }
                        }
                    }, 100);
                """)
            
            logging.info("üéÆ –ü–æ–ø—ã—Ç–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–∏–¥–µ–æ: {e}")
            # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
            try:
                self.driver.switch_to.default_content()
            except:
                pass

    def wait_for_aviso_timer_completion(self) -> bool:
        """–£–õ–£–ß–®–ï–ù–ù–û–ï –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        logging.info("‚è± –û–∂–∏–¥–∞–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ Aviso...")
        
        try:
            last_timer_value = None
            same_value_counter = 0
            check_count = 0
            video_was_playing = False  # –§–ª–∞–≥ —á—Ç–æ –≤–∏–¥–µ–æ –∫–æ–≥–¥–∞-—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ
            restart_attempts = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ü–û–°–õ–ï –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            video_started_logged = False  # –§–ª–∞–≥ —á—Ç–æ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–ª–∏ –∑–∞–ø—É—Å–∫
            
            while True:
                check_count += 1
                
                # –≠–§–§–ï–ö–¢–ò–í–ù–´–ô –ø–æ–∏—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞ 1 –∑–∞–ø—Ä–æ—Å
                timer_status = self.driver.execute_script("""
                    // –ò—â–µ–º —Ç–∞–π–º–µ—Ä
                    var timerElement = document.querySelector('span.timer#tmr');
                    if (timerElement) {
                        var timerText = timerElement.textContent.trim();
                        if (/^\d+$/.test(timerText)) {
                            return {status: 'timer_found', value: parseInt(timerText)};
                        }
                    }
                    
                    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    var completionElements = document.querySelectorAll('span');
                    for (var i = 0; i < completionElements.length; i++) {
                        var text = completionElements[i].textContent;
                        if (text.includes('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞') && text.includes('–Ω–∞—á–∏—Å–ª–µ–Ω–æ')) {
                            return {status: 'completed', message: text.trim()};
                        }
                    }
                    
                    return {status: 'not_found'};
                """)
                
                if timer_status['status'] == 'completed':
                    logging.info(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {timer_status['message']}")
                    return True
                
                if timer_status['status'] == 'timer_found':
                    current_timer_value = timer_status['value']
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                    if check_count % 20 == 0:
                        logging.info(f"‚è∞ –¢–∞–π–º–µ—Ä: {current_timer_value}—Å")
                    
                    if last_timer_value is not None:
                        if current_timer_value == last_timer_value:
                            same_value_counter += 1
                            
                            # –í–∏–¥–µ–æ –∑–∞—Å—Ç—Ä—è–ª–æ –Ω–∞ 5+ —Å–µ–∫—É–Ω–¥
                            if same_value_counter >= 10:  # 5 —Å–µ–∫—É–Ω–¥
                                
                                # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –£–ñ–ï —Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞–Ω—å—à–µ, –Ω–æ —Ç–µ–ø–µ—Ä—å –∑–∞—Å—Ç—Ä—è–ª–æ
                                if video_was_playing:
                                    restart_attempts += 1
                                    logging.warning(f"‚è∏ –í–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å! –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {restart_attempts}/3")
                                    
                                    # –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                    if restart_attempts >= 3:
                                        logging.error("üí• –í–∏–¥–µ–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è! –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
                                        self.driver.refresh()
                                        time.sleep(5)
                                        
                                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                                        self.handle_youtube_ads()
                                        
                                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                                        restart_attempts = 0
                                        video_was_playing = False
                                        video_started_logged = False
                                        last_timer_value = None
                                        same_value_counter = 0
                                        continue
                                else:
                                    # –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å
                                    if not video_started_logged:
                                        logging.warning("‚è∏ –í–∏–¥–µ–æ –Ω–∞ –ø–∞—É–∑–µ! –ó–∞–ø—É—Å–∫–∞–µ–º...")
                                
                                self.click_center_screen()
                                same_value_counter = 0  # –°–ë–†–û–°!
                        else:
                            # –¢–∞–π–º–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è - –≤–∏–¥–µ–æ —Ä–∞–±–æ—Ç–∞–µ—Ç!
                            if same_value_counter > 0:
                                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –û–î–ò–ù —Ä–∞–∑
                                if not video_started_logged:
                                    logging.info("‚ñ∂ –í–∏–¥–µ–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
                                    video_started_logged = True
                                video_was_playing = True  # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ –≤–∏–¥–µ–æ —Ä–∞–±–æ—Ç–∞–ª–æ
                                restart_attempts = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                            same_value_counter = 0
                    
                    last_timer_value = current_timer_value
                    
                    if current_timer_value <= 0:
                        logging.info("‚úÖ –¢–∞–π–º–µ—Ä –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è")
                        break
                
                time.sleep(0.5)
                
                if check_count > 1200:  # 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
                    logging.warning("‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
                    return False
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            time.sleep(2)
            final_check = self.driver.execute_script("""
                var completionElements = document.querySelectorAll('span');
                for (var i = 0; i < completionElements.length; i++) {
                    var text = completionElements[i].textContent;
                    if (text.includes('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞') && text.includes('–Ω–∞—á–∏—Å–ª–µ–Ω–æ')) {
                        return text.trim();
                    }
                }
                return null;
            """)
            
            if final_check:
                logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: {final_check}")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–∞–π–º–µ—Ä–∞: {e}")
            return False
    
    def execute_youtube_task(self, task: Dict) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è YouTube"""
        task_id = task['id']
        
        logging.info(f"üéØ –ó–∞–¥–∞–Ω–∏–µ {task_id}")
        
        original_window = self.driver.current_window_handle
        
        try:
            ActionChains(self.driver).move_to_element(task['row']).perform()
            time.sleep(random.uniform(1, 3))
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∫–ª–∏–∫–æ–º
            pause = random.uniform(2, 15)
            logging.info(f"‚è≥ –ü–∞—É–∑–∞ {pause:.1f}—Å")
            time.sleep(pause)
            
            start_button = task['element']
            
            # –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞–Ω–∏—é
            try:
                viewport_size = self.driver.get_window_size()
                current_pos = (viewport_size['width'] // 2, viewport_size['height'] // 2)
                button_rect = start_button.rect
                
                target_x = max(10, min(viewport_size['width'] - 10, int(button_rect['x'] + button_rect['width'] // 2)))
                target_y = max(10, min(viewport_size['height'] - 10, int(button_rect['y'] + button_rect['height'] // 2)))
                target_pos = (target_x, target_y)
                
                curve_points = HumanBehaviorSimulator.generate_bezier_curve(current_pos, target_pos)
                actions = ActionChains(self.driver)
                
                for i, point in enumerate(curve_points[1:], 1):
                    prev_point = curve_points[i-1]
                    offset_x = max(-50, min(50, int(point[0] - prev_point[0])))
                    offset_y = max(-50, min(50, int(point[1] - prev_point[1])))
                    actions.move_by_offset(offset_x, offset_y)
                    time.sleep(random.uniform(0.01, 0.03))
                
                actions.click(start_button).perform()
            except:
                start_button.click()
            
            time.sleep(5)
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            all_windows = self.driver.window_handles
            
            new_window = None
            for window in all_windows:
                if window != original_window:
                    self.driver.switch_to.window(window)
                    new_window = window
                    break
            
            if not new_window:
                logging.error("‚ùå –ù–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∫–ª–∞–º—ã
            self.handle_youtube_ads()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ —Ç–∞–π–º–µ—Ä—É Aviso
            if self.wait_for_aviso_timer_completion():
                logging.info("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
                time.sleep(random.uniform(2, 8))
                
                # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω—É—é –≤–∫–ª–∞–¥–∫—É
                self.driver.close()
                self.driver.switch_to.window(original_window)
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
                self.driver.refresh()
                time.sleep(5)
                
                return True
            else:
                logging.error(f"‚ùå –ó–∞–¥–∞–Ω–∏–µ {task_id} –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return False
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–¥–∞–Ω–∏—è {task_id}: {e}")
            
            # –û—á–∏—Å—Ç–∫–∞ –æ–∫–æ–Ω
            try:
                all_windows = self.driver.window_handles
                if len(all_windows) > 1:
                    for window in all_windows:
                        if window != original_window:
                            self.driver.switch_to.window(window)
                            self.driver.close()
                    self.driver.switch_to.window(original_window)
                else:
                    self.driver.switch_to.window(original_window)
            except:
                pass
            
            return False
    
    def execute_all_tasks(self) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞–Ω–∏–π"""
        logging.info("üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π...")
        
        tasks = self.get_youtube_tasks()
        if not tasks:
            logging.info("üì≠ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            return 0
        
        completed_tasks = 0
        random.shuffle(tasks)
        
        for i, task in enumerate(tasks):
            logging.info(f"üìù {i+1}/{len(tasks)}")
            
            try:
                if self.execute_youtube_task(task):
                    completed_tasks += 1
                    logging.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {completed_tasks}/{len(tasks)}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–¥–∞–Ω–∏—è–º–∏
                if i < len(tasks) - 1:
                    pause_time = random.uniform(1, 25)
                    logging.info(f"‚è≥ –ü–∞—É–∑–∞ {pause_time:.1f}—Å")
                    
                    for _ in range(int(pause_time // 12)):
                        if random.random() < 0.5:
                            self.random_mouse_movement()
                        if random.random() < 0.3:
                            self.random_scroll()
                        time.sleep(random.uniform(10, 15))
                
            except Exception as e:
                logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
                continue
        
        logging.info(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_tasks}/{len(tasks)}")
        return completed_tasks
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞"""
        try:
            if self.driver:
                self.driver.quit()
        except:
            pass
        
        try:
            if self.use_tor:
                self.tor_manager.stop_tor()
        except:
            pass
    
    def run_cycle(self) -> bool:
        """–û–¥–∏–Ω —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        logging.info("üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞")
        
        try:
            if not self.setup_driver():
                logging.error("‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞")
                return False
            
            cookies_loaded = self.load_cookies()
            
            if cookies_loaded:
                logging.info("üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ cookies...")
                self.driver.refresh()
                time.sleep(8)
                
                if self.check_authorization():
                    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ cookies")
                else:
                    if not self.login():
                        return False
            else:
                if not self.login():
                    return False
            
            completed_tasks = self.execute_all_tasks()
            
            if completed_tasks > 0:
                logging.info(f"‚úÖ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω: {completed_tasks} –∑–∞–¥–∞–Ω–∏–π")
            else:
                logging.info("‚Ñπ –ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π")
            
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            return False
        finally:
            self.cleanup()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
        logging.info("ü§ñ –ó–ê–ü–£–°–ö –≠–§–§–ï–ö–¢–ò–í–ù–û–ì–û AVISO BOT")
        
        cycle_count = 0
        consecutive_failures = 0
        max_consecutive_failures = 3
        
        try:
            while True:
                cycle_count += 1
                logging.info(f"üîÑ –¶–ò–ö–õ #{cycle_count}")
                
                success = self.run_cycle()
                
                if success:
                    consecutive_failures = 0
                    
                    pause_minutes = random.uniform(1, 120)
                    pause_seconds = pause_minutes * 60
                    
                    next_run_time = datetime.now() + timedelta(seconds=pause_seconds)
                    
                    logging.info(f"üò¥ –ü–∞—É–∑–∞ {pause_minutes:.1f} –º–∏–Ω—É—Ç")
                    logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π: {next_run_time.strftime('%H:%M:%S')}")
                    
                    pause_intervals = max(1, int(pause_seconds // 60))
                    interval_duration = pause_seconds / pause_intervals
                    
                    for i in range(pause_intervals):
                        time.sleep(interval_duration)
                else:
                    consecutive_failures += 1
                    
                    if consecutive_failures >= max_consecutive_failures:
                        logging.error("üí• –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
                        break
                    else:
                        pause_minutes = random.uniform(5, 15)
                    
                    logging.warning(f"‚ö† –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞, –ø–∞—É–∑–∞ {pause_minutes:.1f} –º–∏–Ω—É—Ç")
                    time.sleep(pause_minutes * 60)
        
        except KeyboardInterrupt:
            logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ (Ctrl+C)")
        except Exception as e:
            logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.cleanup()
            logging.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É"""
    print("ü§ñ Aviso YouTube Tasks Automation Bot - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)
    print("üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫...")
    print("‚ö†  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!")
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("   ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç Tor —Å 2 –¥–æ 20 –º–∏–Ω—É—Ç")
    print("   ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –ø—Ä–æ–≤–µ—Ä–∫–∞ IP —á–µ—Ä–µ–∑ 2ip.ru")
    print("   ‚úÖ –£–±—Ä–∞–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ URL –Ω–æ–≤—ã—Ö –≤–∫–ª–∞–¥–æ–∫")
    print("   ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–´ –æ—à–∏–±–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏")
    print("   ‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    print("üìã –§—É–Ω–∫—Ü–∏–∏:")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ aviso.bz")
    print("   - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä—É YouTube")
    print("   - –ò–º–∏—Ç–∞—Ü–∏—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è")
    print("   - –†–∞–±–æ—Ç–∞ —á–µ—Ä–µ–∑ Tor –ø—Ä–æ–∫—Å–∏ –ò–õ–ò –ë–ï–ó –ø—Ä–æ–∫—Å–∏ (fallback)")
    print("   - –ü–†–û–í–ï–†–ö–ê –°–ú–ï–ù–´ IP —á–µ—Ä–µ–∑ 2ip.ru")
    print("   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ geckodriver")
    print("   - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π User-Agent –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
    print("   - –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è –æ–ø–µ—á–∞—Ç–æ–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ")
    print("   - –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ Termux/Android")
    print("=" * 80)
    print()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    bot = AvisoAutomation()
    
    try:
        bot.run()
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        sys.exit(1)
    finally:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()